
ATmega32 driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bf6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000bf6  00000c8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800068  00800068  00000c92  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c92  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cc4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001510  00000000  00000000  00000e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000985  00000000  00000000  00002390  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bd3  00000000  00000000  00002d15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b4  00000000  00000000  000038e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c5  00000000  00000000  00003b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001063  00000000  00000000  00004261  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  000052c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 a7 03 	jmp	0x74e	; 0x74e <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ef       	ldi	r30, 0xF6	; 246
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 36       	cpi	r26, 0x6D	; 109
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0e 03 	call	0x61c	; 0x61c <main>
  8a:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Init>:
#include "ADC_interface.h"
#include "Definitions.h"
void           ADC_Init(unsigned char pin)
{
	 /*ADC_INIT*/
	Bit_Set(ADMUX,REFS0); //AVCC with external capacitor at AREF pin
  92:	97 b1       	in	r25, 0x07	; 7
  94:	90 64       	ori	r25, 0x40	; 64
  96:	97 b9       	out	0x07, r25	; 7
	/* configure channel */
	if(pin == 0) // channel 0
  98:	88 23       	and	r24, r24
  9a:	b1 f1       	breq	.+108    	; 0x108 <ADC_Init+0x76>
	 {
		 
	 }
	 else if(pin == 1)  // channel 1
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	21 f4       	brne	.+8      	; 0xa8 <ADC_Init+0x16>
	 {
		 Bit_Set(ADMUX,MUX0); 
  a0:	87 b1       	in	r24, 0x07	; 7
  a2:	81 60       	ori	r24, 0x01	; 1
  a4:	87 b9       	out	0x07, r24	; 7
  a6:	30 c0       	rjmp	.+96     	; 0x108 <ADC_Init+0x76>
	 }
	 else if(pin == 2)  // channel 2
  a8:	82 30       	cpi	r24, 0x02	; 2
  aa:	21 f4       	brne	.+8      	; 0xb4 <ADC_Init+0x22>
	 {
		 Bit_Set(ADMUX,MUX1); 
  ac:	87 b1       	in	r24, 0x07	; 7
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	87 b9       	out	0x07, r24	; 7
  b2:	2a c0       	rjmp	.+84     	; 0x108 <ADC_Init+0x76>
	 }
	 else if(pin == 3)  // channel 3
  b4:	83 30       	cpi	r24, 0x03	; 3
  b6:	39 f4       	brne	.+14     	; 0xc6 <ADC_Init+0x34>
	 {
		 Bit_Set(ADMUX,MUX0); 
  b8:	87 b1       	in	r24, 0x07	; 7
  ba:	81 60       	ori	r24, 0x01	; 1
  bc:	87 b9       	out	0x07, r24	; 7
		 Bit_Set(ADMUX,MUX1); 
  be:	87 b1       	in	r24, 0x07	; 7
  c0:	82 60       	ori	r24, 0x02	; 2
  c2:	87 b9       	out	0x07, r24	; 7
  c4:	21 c0       	rjmp	.+66     	; 0x108 <ADC_Init+0x76>
	 }
	 else if(pin == 4)  // channel 4
  c6:	84 30       	cpi	r24, 0x04	; 4
  c8:	21 f4       	brne	.+8      	; 0xd2 <ADC_Init+0x40>
	 {
		 Bit_Set(ADMUX,MUX2); 
  ca:	87 b1       	in	r24, 0x07	; 7
  cc:	84 60       	ori	r24, 0x04	; 4
  ce:	87 b9       	out	0x07, r24	; 7
  d0:	1b c0       	rjmp	.+54     	; 0x108 <ADC_Init+0x76>
	 }
	 else if(pin == 5)  // channel 5
  d2:	85 30       	cpi	r24, 0x05	; 5
  d4:	39 f4       	brne	.+14     	; 0xe4 <ADC_Init+0x52>
	 {
		 Bit_Set(ADMUX,MUX0); 
  d6:	87 b1       	in	r24, 0x07	; 7
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	87 b9       	out	0x07, r24	; 7
		 Bit_Set(ADMUX,MUX2); 
  dc:	87 b1       	in	r24, 0x07	; 7
  de:	84 60       	ori	r24, 0x04	; 4
  e0:	87 b9       	out	0x07, r24	; 7
  e2:	12 c0       	rjmp	.+36     	; 0x108 <ADC_Init+0x76>
	 }
	 else if(pin == 6)  // channel 6
  e4:	86 30       	cpi	r24, 0x06	; 6
  e6:	39 f4       	brne	.+14     	; 0xf6 <ADC_Init+0x64>
	 {
		 Bit_Set(ADMUX,MUX1);
  e8:	87 b1       	in	r24, 0x07	; 7
  ea:	82 60       	ori	r24, 0x02	; 2
  ec:	87 b9       	out	0x07, r24	; 7
         Bit_Set(ADMUX,MUX2); 		 
  ee:	87 b1       	in	r24, 0x07	; 7
  f0:	84 60       	ori	r24, 0x04	; 4
  f2:	87 b9       	out	0x07, r24	; 7
  f4:	09 c0       	rjmp	.+18     	; 0x108 <ADC_Init+0x76>
	 } 
	 else   // channel 7
	 {
		  Bit_Set(ADMUX,MUX0); 
  f6:	87 b1       	in	r24, 0x07	; 7
  f8:	81 60       	ori	r24, 0x01	; 1
  fa:	87 b9       	out	0x07, r24	; 7
		  Bit_Set(ADMUX,MUX1); 
  fc:	87 b1       	in	r24, 0x07	; 7
  fe:	82 60       	ori	r24, 0x02	; 2
 100:	87 b9       	out	0x07, r24	; 7
		  Bit_Set(ADMUX,MUX2); 
 102:	87 b1       	in	r24, 0x07	; 7
 104:	84 60       	ori	r24, 0x04	; 4
 106:	87 b9       	out	0x07, r24	; 7
	 }
	Bit_Set(ADCSRA,ADEN); //Enable ADC
 108:	86 b1       	in	r24, 0x06	; 6
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	86 b9       	out	0x06, r24	; 6
	/*SET clock of ADC,ADPS0 default zero*/
	Bit_Set(ADCSRA,ADPS2);
 10e:	86 b1       	in	r24, 0x06	; 6
 110:	84 60       	ori	r24, 0x04	; 4
 112:	86 b9       	out	0x06, r24	; 6
	Bit_Set(ADCSRA,ADPS1);
 114:	86 b1       	in	r24, 0x06	; 6
 116:	82 60       	ori	r24, 0x02	; 2
 118:	86 b9       	out	0x06, r24	; 6
 11a:	08 95       	ret

0000011c <ADC_Read>:
	/*ADC_END_INIT*/
}
unsigned short ADC_Read(unsigned char pin)
{
	unsigned short read_value;
	Bit_Set(ADCSRA,ADSC); //start conversion ADC
 11c:	86 b1       	in	r24, 0x06	; 6
 11e:	80 64       	ori	r24, 0x40	; 64
 120:	86 b9       	out	0x06, r24	; 6
	while(Bit_Read(ADCSRA,ADSC)==1);
 122:	36 99       	sbic	0x06, 6	; 6
 124:	fe cf       	rjmp	.-4      	; 0x122 <ADC_Read+0x6>
	//while(Bit_Read(ADCSRA,ADIF)==0);
	//Bit_Set(ADCSRA,ADIF); //clear flag of ADC
	read_value=ADCL;
 126:	24 b1       	in	r18, 0x04	; 4
	read_value|=(ADCH<<8);
 128:	85 b1       	in	r24, 0x05	; 5
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	98 2f       	mov	r25, r24
 12e:	88 27       	eor	r24, r24
	return read_value;
 130:	82 2b       	or	r24, r18
 132:	08 95       	ret

00000134 <DIO_SetPinDir>:
		case portd:
		value=((PIND&(1<<pin))>>pin);
		break;
	}
return value;
}
 134:	82 34       	cpi	r24, 0x42	; 66
 136:	19 f1       	breq	.+70     	; 0x17e <DIO_SetPinDir+0x4a>
 138:	18 f4       	brcc	.+6      	; 0x140 <DIO_SetPinDir+0xc>
 13a:	81 34       	cpi	r24, 0x41	; 65
 13c:	39 f0       	breq	.+14     	; 0x14c <DIO_SetPinDir+0x18>
 13e:	08 95       	ret
 140:	83 34       	cpi	r24, 0x43	; 67
 142:	b1 f1       	breq	.+108    	; 0x1b0 <DIO_SetPinDir+0x7c>
 144:	84 34       	cpi	r24, 0x44	; 68
 146:	09 f4       	brne	.+2      	; 0x14a <DIO_SetPinDir+0x16>
 148:	4c c0       	rjmp	.+152    	; 0x1e2 <DIO_SetPinDir+0xae>
 14a:	08 95       	ret
 14c:	41 30       	cpi	r20, 0x01	; 1
 14e:	59 f4       	brne	.+22     	; 0x166 <DIO_SetPinDir+0x32>
 150:	2a b3       	in	r18, 0x1a	; 26
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_SetPinDir+0x28>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_SetPinDir+0x24>
 160:	82 2b       	or	r24, r18
 162:	8a bb       	out	0x1a, r24	; 26
 164:	08 95       	ret
 166:	2a b3       	in	r18, 0x1a	; 26
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_SetPinDir+0x3e>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_SetPinDir+0x3a>
 176:	80 95       	com	r24
 178:	82 23       	and	r24, r18
 17a:	8a bb       	out	0x1a, r24	; 26
 17c:	08 95       	ret
 17e:	41 30       	cpi	r20, 0x01	; 1
 180:	59 f4       	brne	.+22     	; 0x198 <DIO_SetPinDir+0x64>
 182:	27 b3       	in	r18, 0x17	; 23
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_SetPinDir+0x5a>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_SetPinDir+0x56>
 192:	82 2b       	or	r24, r18
 194:	87 bb       	out	0x17, r24	; 23
 196:	08 95       	ret
 198:	27 b3       	in	r18, 0x17	; 23
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_SetPinDir+0x70>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	6a 95       	dec	r22
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_SetPinDir+0x6c>
 1a8:	80 95       	com	r24
 1aa:	82 23       	and	r24, r18
 1ac:	87 bb       	out	0x17, r24	; 23
 1ae:	08 95       	ret
 1b0:	41 30       	cpi	r20, 0x01	; 1
 1b2:	59 f4       	brne	.+22     	; 0x1ca <DIO_SetPinDir+0x96>
 1b4:	24 b3       	in	r18, 0x14	; 20
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <DIO_SetPinDir+0x8c>
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	6a 95       	dec	r22
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <DIO_SetPinDir+0x88>
 1c4:	82 2b       	or	r24, r18
 1c6:	84 bb       	out	0x14, r24	; 20
 1c8:	08 95       	ret
 1ca:	24 b3       	in	r18, 0x14	; 20
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_SetPinDir+0xa2>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_SetPinDir+0x9e>
 1da:	80 95       	com	r24
 1dc:	82 23       	and	r24, r18
 1de:	84 bb       	out	0x14, r24	; 20
 1e0:	08 95       	ret
 1e2:	41 30       	cpi	r20, 0x01	; 1
 1e4:	59 f4       	brne	.+22     	; 0x1fc <DIO_SetPinDir+0xc8>
 1e6:	21 b3       	in	r18, 0x11	; 17
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_SetPinDir+0xbe>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_SetPinDir+0xba>
 1f6:	82 2b       	or	r24, r18
 1f8:	81 bb       	out	0x11, r24	; 17
 1fa:	08 95       	ret
 1fc:	21 b3       	in	r18, 0x11	; 17
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_SetPinDir+0xd4>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_SetPinDir+0xd0>
 20c:	80 95       	com	r24
 20e:	82 23       	and	r24, r18
 210:	81 bb       	out	0x11, r24	; 17
 212:	08 95       	ret

00000214 <DIO_WritePin>:
 214:	82 34       	cpi	r24, 0x42	; 66
 216:	19 f1       	breq	.+70     	; 0x25e <DIO_WritePin+0x4a>
 218:	18 f4       	brcc	.+6      	; 0x220 <DIO_WritePin+0xc>
 21a:	81 34       	cpi	r24, 0x41	; 65
 21c:	39 f0       	breq	.+14     	; 0x22c <DIO_WritePin+0x18>
 21e:	08 95       	ret
 220:	83 34       	cpi	r24, 0x43	; 67
 222:	b1 f1       	breq	.+108    	; 0x290 <DIO_WritePin+0x7c>
 224:	84 34       	cpi	r24, 0x44	; 68
 226:	09 f4       	brne	.+2      	; 0x22a <DIO_WritePin+0x16>
 228:	4c c0       	rjmp	.+152    	; 0x2c2 <DIO_WritePin+0xae>
 22a:	08 95       	ret
 22c:	41 30       	cpi	r20, 0x01	; 1
 22e:	59 f4       	brne	.+22     	; 0x246 <DIO_WritePin+0x32>
 230:	2b b3       	in	r18, 0x1b	; 27
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_WritePin+0x28>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_WritePin+0x24>
 240:	82 2b       	or	r24, r18
 242:	8b bb       	out	0x1b, r24	; 27
 244:	08 95       	ret
 246:	2b b3       	in	r18, 0x1b	; 27
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_WritePin+0x3e>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	6a 95       	dec	r22
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_WritePin+0x3a>
 256:	80 95       	com	r24
 258:	82 23       	and	r24, r18
 25a:	8b bb       	out	0x1b, r24	; 27
 25c:	08 95       	ret
 25e:	41 30       	cpi	r20, 0x01	; 1
 260:	59 f4       	brne	.+22     	; 0x278 <DIO_WritePin+0x64>
 262:	28 b3       	in	r18, 0x18	; 24
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_WritePin+0x5a>
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	6a 95       	dec	r22
 270:	e2 f7       	brpl	.-8      	; 0x26a <DIO_WritePin+0x56>
 272:	82 2b       	or	r24, r18
 274:	88 bb       	out	0x18, r24	; 24
 276:	08 95       	ret
 278:	28 b3       	in	r18, 0x18	; 24
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	02 c0       	rjmp	.+4      	; 0x284 <DIO_WritePin+0x70>
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	6a 95       	dec	r22
 286:	e2 f7       	brpl	.-8      	; 0x280 <DIO_WritePin+0x6c>
 288:	80 95       	com	r24
 28a:	82 23       	and	r24, r18
 28c:	88 bb       	out	0x18, r24	; 24
 28e:	08 95       	ret
 290:	41 30       	cpi	r20, 0x01	; 1
 292:	59 f4       	brne	.+22     	; 0x2aa <DIO_WritePin+0x96>
 294:	25 b3       	in	r18, 0x15	; 21
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_WritePin+0x8c>
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	6a 95       	dec	r22
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_WritePin+0x88>
 2a4:	82 2b       	or	r24, r18
 2a6:	85 bb       	out	0x15, r24	; 21
 2a8:	08 95       	ret
 2aa:	25 b3       	in	r18, 0x15	; 21
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_WritePin+0xa2>
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	6a 95       	dec	r22
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <DIO_WritePin+0x9e>
 2ba:	80 95       	com	r24
 2bc:	82 23       	and	r24, r18
 2be:	85 bb       	out	0x15, r24	; 21
 2c0:	08 95       	ret
 2c2:	41 30       	cpi	r20, 0x01	; 1
 2c4:	59 f4       	brne	.+22     	; 0x2dc <DIO_WritePin+0xc8>
 2c6:	22 b3       	in	r18, 0x12	; 18
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_WritePin+0xbe>
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	6a 95       	dec	r22
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_WritePin+0xba>
 2d6:	82 2b       	or	r24, r18
 2d8:	82 bb       	out	0x12, r24	; 18
 2da:	08 95       	ret
 2dc:	22 b3       	in	r18, 0x12	; 18
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_WritePin+0xd4>
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	6a 95       	dec	r22
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_WritePin+0xd0>
 2ec:	80 95       	com	r24
 2ee:	82 23       	and	r24, r18
 2f0:	82 bb       	out	0x12, r24	; 18
 2f2:	08 95       	ret

000002f4 <DIO_SetPortDir>:

void DIO_SetPortDir (uint8_t port,uint8_t dir)
{
	switch(port)
 2f4:	82 34       	cpi	r24, 0x42	; 66
 2f6:	59 f0       	breq	.+22     	; 0x30e <DIO_SetPortDir+0x1a>
 2f8:	18 f4       	brcc	.+6      	; 0x300 <DIO_SetPortDir+0xc>
 2fa:	81 34       	cpi	r24, 0x41	; 65
 2fc:	31 f0       	breq	.+12     	; 0x30a <DIO_SetPortDir+0x16>
 2fe:	08 95       	ret
 300:	83 34       	cpi	r24, 0x43	; 67
 302:	39 f0       	breq	.+14     	; 0x312 <DIO_SetPortDir+0x1e>
 304:	84 34       	cpi	r24, 0x44	; 68
 306:	39 f0       	breq	.+14     	; 0x316 <DIO_SetPortDir+0x22>
 308:	08 95       	ret
	{
		//portA
		case porta:
		DDRA=dir;
 30a:	6a bb       	out	0x1a, r22	; 26
		break;
 30c:	08 95       	ret
		//portB
		case portb:
		DDRB=dir;
 30e:	67 bb       	out	0x17, r22	; 23
		break;
 310:	08 95       	ret
		//portC
		case portc:
		DDRC=dir;
 312:	64 bb       	out	0x14, r22	; 20
		break;
 314:	08 95       	ret
		//portD
		case portd:
		DDRD=dir;
 316:	61 bb       	out	0x11, r22	; 17
 318:	08 95       	ret

0000031a <DIO_WritePort>:
		break;
	}
}
void DIO_WritePort (uint8_t port,uint8_t val)
{
	switch(port)
 31a:	82 34       	cpi	r24, 0x42	; 66
 31c:	59 f0       	breq	.+22     	; 0x334 <DIO_WritePort+0x1a>
 31e:	18 f4       	brcc	.+6      	; 0x326 <DIO_WritePort+0xc>
 320:	81 34       	cpi	r24, 0x41	; 65
 322:	31 f0       	breq	.+12     	; 0x330 <DIO_WritePort+0x16>
 324:	08 95       	ret
 326:	83 34       	cpi	r24, 0x43	; 67
 328:	39 f0       	breq	.+14     	; 0x338 <DIO_WritePort+0x1e>
 32a:	84 34       	cpi	r24, 0x44	; 68
 32c:	39 f0       	breq	.+14     	; 0x33c <DIO_WritePort+0x22>
 32e:	08 95       	ret
	{

		//portA
		case porta:
		PORTA=val;
 330:	6b bb       	out	0x1b, r22	; 27
		break;
 332:	08 95       	ret
		//portB
		case portb:
		PORTB=val;
 334:	68 bb       	out	0x18, r22	; 24
		break;
 336:	08 95       	ret
		//portC
		case portc:
		PORTC=val;
 338:	65 bb       	out	0x15, r22	; 21
		break;
 33a:	08 95       	ret
		//portD
		case portd:
		PORTD=val;
 33c:	62 bb       	out	0x12, r22	; 18
 33e:	08 95       	ret

00000340 <EXTI_vEnable>:
#include "EXTI_interface.h"


void EXTI_vEnable(unsigned char EXTI_PIN)
{
	switch(EXTI_PIN)
 340:	81 30       	cpi	r24, 0x01	; 1
 342:	41 f0       	breq	.+16     	; 0x354 <EXTI_vEnable+0x14>
 344:	18 f0       	brcs	.+6      	; 0x34c <EXTI_vEnable+0xc>
 346:	82 30       	cpi	r24, 0x02	; 2
 348:	49 f0       	breq	.+18     	; 0x35c <EXTI_vEnable+0x1c>
 34a:	08 95       	ret
	{
		case 0:
		Bit_Set(GICR,INT0);
 34c:	8b b7       	in	r24, 0x3b	; 59
 34e:	80 64       	ori	r24, 0x40	; 64
 350:	8b bf       	out	0x3b, r24	; 59
		break;
 352:	08 95       	ret
		case 1:
		Bit_Set(GICR,INT1);
 354:	8b b7       	in	r24, 0x3b	; 59
 356:	80 68       	ori	r24, 0x80	; 128
 358:	8b bf       	out	0x3b, r24	; 59
		break;
 35a:	08 95       	ret
		case 2:
		Bit_Set(GICR,INT2);
 35c:	8b b7       	in	r24, 0x3b	; 59
 35e:	80 62       	ori	r24, 0x20	; 32
 360:	8b bf       	out	0x3b, r24	; 59
 362:	08 95       	ret

00000364 <EXTI_vActiveMode>:
// RISING   0     	

void EXTI_vActiveMode(unsigned char EXTI_PIN,unsigned char EXTI_MODE)
{ 

	switch (EXTI_PIN)
 364:	81 30       	cpi	r24, 0x01	; 1
 366:	49 f1       	breq	.+82     	; 0x3ba <EXTI_vActiveMode+0x56>
 368:	20 f0       	brcs	.+8      	; 0x372 <EXTI_vActiveMode+0xe>
 36a:	82 30       	cpi	r24, 0x02	; 2
 36c:	09 f4       	brne	.+2      	; 0x370 <EXTI_vActiveMode+0xc>
 36e:	48 c0       	rjmp	.+144    	; 0x400 <__EEPROM_REGION_LENGTH__>
 370:	08 95       	ret
	{
	case EXTI0:
		switch (EXTI_MODE)
 372:	61 30       	cpi	r22, 0x01	; 1
 374:	c1 f0       	breq	.+48     	; 0x3a6 <EXTI_vActiveMode+0x42>
 376:	68 f0       	brcs	.+26     	; 0x392 <EXTI_vActiveMode+0x2e>
 378:	63 30       	cpi	r22, 0x03	; 3
 37a:	09 f0       	breq	.+2      	; 0x37e <EXTI_vActiveMode+0x1a>
 37c:	53 c0       	rjmp	.+166    	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
				Bit_Set(SREG, GIE);
				Bit_Clear(MCUCR, ISC00);
				Bit_Clear(MCUCR, ISC01);
				break;*/
			case CHANGE:
				Bit_Set(SREG, GIE);
 37e:	8f b7       	in	r24, 0x3f	; 63
 380:	80 68       	ori	r24, 0x80	; 128
 382:	8f bf       	out	0x3f, r24	; 63
				Bit_Set(MCUCR, ISC00);
 384:	85 b7       	in	r24, 0x35	; 53
 386:	81 60       	ori	r24, 0x01	; 1
 388:	85 bf       	out	0x35, r24	; 53
				Bit_Clear(MCUCR, ISC01);
 38a:	85 b7       	in	r24, 0x35	; 53
 38c:	8d 7f       	andi	r24, 0xFD	; 253
 38e:	85 bf       	out	0x35, r24	; 53
				break;
 390:	08 95       	ret
			case FALLING:
				Bit_Set(SREG, GIE);
 392:	8f b7       	in	r24, 0x3f	; 63
 394:	80 68       	ori	r24, 0x80	; 128
 396:	8f bf       	out	0x3f, r24	; 63
				Bit_Clear(MCUCR, ISC00);
 398:	85 b7       	in	r24, 0x35	; 53
 39a:	8e 7f       	andi	r24, 0xFE	; 254
 39c:	85 bf       	out	0x35, r24	; 53
				Bit_Set(MCUCR, ISC01);
 39e:	85 b7       	in	r24, 0x35	; 53
 3a0:	82 60       	ori	r24, 0x02	; 2
 3a2:	85 bf       	out	0x35, r24	; 53
				break;
 3a4:	08 95       	ret
			case RISING:
				Bit_Set(SREG, GIE);
 3a6:	8f b7       	in	r24, 0x3f	; 63
 3a8:	80 68       	ori	r24, 0x80	; 128
 3aa:	8f bf       	out	0x3f, r24	; 63
				Bit_Set(MCUCR, ISC00);
 3ac:	85 b7       	in	r24, 0x35	; 53
 3ae:	81 60       	ori	r24, 0x01	; 1
 3b0:	85 bf       	out	0x35, r24	; 53
				Bit_Set(MCUCR, ISC01);
 3b2:	85 b7       	in	r24, 0x35	; 53
 3b4:	82 60       	ori	r24, 0x02	; 2
 3b6:	85 bf       	out	0x35, r24	; 53
				break;
 3b8:	08 95       	ret
			default:
				break;
		}
		break;
	case EXTI1:
		switch (EXTI_MODE)
 3ba:	61 30       	cpi	r22, 0x01	; 1
 3bc:	b9 f0       	breq	.+46     	; 0x3ec <EXTI_vActiveMode+0x88>
 3be:	60 f0       	brcs	.+24     	; 0x3d8 <EXTI_vActiveMode+0x74>
 3c0:	63 30       	cpi	r22, 0x03	; 3
 3c2:	81 f5       	brne	.+96     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
				Bit_Set(SREG, GIE);
				Bit_Clear(MCUCR, ISC10);
				Bit_Clear(MCUCR, ISC11);
				break;*/
			case CHANGE:
				Bit_Set(SREG, GIE);
 3c4:	8f b7       	in	r24, 0x3f	; 63
 3c6:	80 68       	ori	r24, 0x80	; 128
 3c8:	8f bf       	out	0x3f, r24	; 63
				Bit_Set(MCUCR, ISC10);
 3ca:	85 b7       	in	r24, 0x35	; 53
 3cc:	84 60       	ori	r24, 0x04	; 4
 3ce:	85 bf       	out	0x35, r24	; 53
				Bit_Clear(MCUCR, ISC11);
 3d0:	85 b7       	in	r24, 0x35	; 53
 3d2:	87 7f       	andi	r24, 0xF7	; 247
 3d4:	85 bf       	out	0x35, r24	; 53
				break;
 3d6:	08 95       	ret
			case FALLING:
				Bit_Set(SREG, GIE);
 3d8:	8f b7       	in	r24, 0x3f	; 63
 3da:	80 68       	ori	r24, 0x80	; 128
 3dc:	8f bf       	out	0x3f, r24	; 63
				Bit_Clear(MCUCR, ISC10);
 3de:	85 b7       	in	r24, 0x35	; 53
 3e0:	8b 7f       	andi	r24, 0xFB	; 251
 3e2:	85 bf       	out	0x35, r24	; 53
				Bit_Set(MCUCR, ISC11);
 3e4:	85 b7       	in	r24, 0x35	; 53
 3e6:	88 60       	ori	r24, 0x08	; 8
 3e8:	85 bf       	out	0x35, r24	; 53
				break;
 3ea:	08 95       	ret
			case RISING:
				Bit_Set(SREG, GIE);
 3ec:	8f b7       	in	r24, 0x3f	; 63
 3ee:	80 68       	ori	r24, 0x80	; 128
 3f0:	8f bf       	out	0x3f, r24	; 63
				Bit_Set(MCUCR, ISC10);
 3f2:	85 b7       	in	r24, 0x35	; 53
 3f4:	84 60       	ori	r24, 0x04	; 4
 3f6:	85 bf       	out	0x35, r24	; 53
				Bit_Set(MCUCR, ISC11);
 3f8:	85 b7       	in	r24, 0x35	; 53
 3fa:	88 60       	ori	r24, 0x08	; 8
 3fc:	85 bf       	out	0x35, r24	; 53
				break;
 3fe:	08 95       	ret
			default:
				break;
		}
		break;
	case EXTI2:
		switch (EXTI_MODE)
 400:	66 23       	and	r22, r22
 402:	19 f0       	breq	.+6      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 404:	61 30       	cpi	r22, 0x01	; 1
 406:	41 f0       	breq	.+16     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 408:	08 95       	ret
		{
			case FALLING:
				Bit_Set(SREG, GIE);
 40a:	8f b7       	in	r24, 0x3f	; 63
 40c:	80 68       	ori	r24, 0x80	; 128
 40e:	8f bf       	out	0x3f, r24	; 63
				Bit_Set(MCUCSR, ISC2);
 410:	84 b7       	in	r24, 0x34	; 52
 412:	80 64       	ori	r24, 0x40	; 64
 414:	84 bf       	out	0x34, r24	; 52
				break;
 416:	08 95       	ret
			case RISING:
				Bit_Set(SREG, GIE);
 418:	8f b7       	in	r24, 0x3f	; 63
 41a:	80 68       	ori	r24, 0x80	; 128
 41c:	8f bf       	out	0x3f, r24	; 63
				Bit_Clear(MCUCSR, ISC2);
 41e:	84 b7       	in	r24, 0x34	; 52
 420:	8f 7b       	andi	r24, 0xBF	; 191
 422:	84 bf       	out	0x34, r24	; 52
 424:	08 95       	ret

00000426 <LCD_Enable>:
	double f_part=num- (double)(i_part);
	LCD_SendNumber(i_part);
	LCD_SendChar('.');
	f_part=f_part*power(10,DIGITS);
	LCD_SendNumber(f_part);
}
 426:	41 e0       	ldi	r20, 0x01	; 1
 428:	60 e0       	ldi	r22, 0x00	; 0
 42a:	84 e4       	ldi	r24, 0x44	; 68
 42c:	0e 94 0a 01 	call	0x214	; 0x214 <DIO_WritePin>
 430:	8f e9       	ldi	r24, 0x9F	; 159
 432:	9f e0       	ldi	r25, 0x0F	; 15
 434:	01 97       	sbiw	r24, 0x01	; 1
 436:	f1 f7       	brne	.-4      	; 0x434 <LCD_Enable+0xe>
 438:	00 c0       	rjmp	.+0      	; 0x43a <LCD_Enable+0x14>
 43a:	00 00       	nop
 43c:	40 e0       	ldi	r20, 0x00	; 0
 43e:	60 e0       	ldi	r22, 0x00	; 0
 440:	84 e4       	ldi	r24, 0x44	; 68
 442:	0e 94 0a 01 	call	0x214	; 0x214 <DIO_WritePin>
 446:	8f e9       	ldi	r24, 0x9F	; 159
 448:	9f e0       	ldi	r25, 0x0F	; 15
 44a:	01 97       	sbiw	r24, 0x01	; 1
 44c:	f1 f7       	brne	.-4      	; 0x44a <LCD_Enable+0x24>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <LCD_Enable+0x2a>
 450:	00 00       	nop
 452:	08 95       	ret

00000454 <LCD_SendCommand>:
 454:	68 2f       	mov	r22, r24
 456:	83 e4       	ldi	r24, 0x43	; 67
 458:	0e 94 8d 01 	call	0x31a	; 0x31a <DIO_WritePort>
 45c:	40 e0       	ldi	r20, 0x00	; 0
 45e:	62 e0       	ldi	r22, 0x02	; 2
 460:	84 e4       	ldi	r24, 0x44	; 68
 462:	0e 94 0a 01 	call	0x214	; 0x214 <DIO_WritePin>
 466:	0e 94 13 02 	call	0x426	; 0x426 <LCD_Enable>
 46a:	8f ec       	ldi	r24, 0xCF	; 207
 46c:	97 e0       	ldi	r25, 0x07	; 7
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	f1 f7       	brne	.-4      	; 0x46e <LCD_SendCommand+0x1a>
 472:	00 c0       	rjmp	.+0      	; 0x474 <LCD_SendCommand+0x20>
 474:	00 00       	nop
 476:	08 95       	ret

00000478 <LCD_Init>:
 478:	2f ef       	ldi	r18, 0xFF	; 255
 47a:	81 ee       	ldi	r24, 0xE1	; 225
 47c:	94 e0       	ldi	r25, 0x04	; 4
 47e:	21 50       	subi	r18, 0x01	; 1
 480:	80 40       	sbci	r24, 0x00	; 0
 482:	90 40       	sbci	r25, 0x00	; 0
 484:	e1 f7       	brne	.-8      	; 0x47e <LCD_Init+0x6>
 486:	00 c0       	rjmp	.+0      	; 0x488 <LCD_Init+0x10>
 488:	00 00       	nop
 48a:	61 e0       	ldi	r22, 0x01	; 1
 48c:	83 e4       	ldi	r24, 0x43	; 67
 48e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <DIO_SetPortDir>
 492:	41 e0       	ldi	r20, 0x01	; 1
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	84 e4       	ldi	r24, 0x44	; 68
 498:	0e 94 9a 00 	call	0x134	; 0x134 <DIO_SetPinDir>
 49c:	41 e0       	ldi	r20, 0x01	; 1
 49e:	62 e0       	ldi	r22, 0x02	; 2
 4a0:	84 e4       	ldi	r24, 0x44	; 68
 4a2:	0e 94 9a 00 	call	0x134	; 0x134 <DIO_SetPinDir>
 4a6:	41 e0       	ldi	r20, 0x01	; 1
 4a8:	61 e0       	ldi	r22, 0x01	; 1
 4aa:	84 e4       	ldi	r24, 0x44	; 68
 4ac:	0e 94 9a 00 	call	0x134	; 0x134 <DIO_SetPinDir>
 4b0:	40 e0       	ldi	r20, 0x00	; 0
 4b2:	61 e0       	ldi	r22, 0x01	; 1
 4b4:	84 e4       	ldi	r24, 0x44	; 68
 4b6:	0e 94 0a 01 	call	0x214	; 0x214 <DIO_WritePin>
 4ba:	88 e3       	ldi	r24, 0x38	; 56
 4bc:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_SendCommand>
 4c0:	8f ec       	ldi	r24, 0xCF	; 207
 4c2:	97 e0       	ldi	r25, 0x07	; 7
 4c4:	01 97       	sbiw	r24, 0x01	; 1
 4c6:	f1 f7       	brne	.-4      	; 0x4c4 <LCD_Init+0x4c>
 4c8:	00 c0       	rjmp	.+0      	; 0x4ca <LCD_Init+0x52>
 4ca:	00 00       	nop
 4cc:	8e e0       	ldi	r24, 0x0E	; 14
 4ce:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_SendCommand>
 4d2:	8f ec       	ldi	r24, 0xCF	; 207
 4d4:	97 e0       	ldi	r25, 0x07	; 7
 4d6:	01 97       	sbiw	r24, 0x01	; 1
 4d8:	f1 f7       	brne	.-4      	; 0x4d6 <LCD_Init+0x5e>
 4da:	00 c0       	rjmp	.+0      	; 0x4dc <LCD_Init+0x64>
 4dc:	00 00       	nop
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_SendCommand>
 4e4:	8f e1       	ldi	r24, 0x1F	; 31
 4e6:	9e e4       	ldi	r25, 0x4E	; 78
 4e8:	01 97       	sbiw	r24, 0x01	; 1
 4ea:	f1 f7       	brne	.-4      	; 0x4e8 <LCD_Init+0x70>
 4ec:	00 c0       	rjmp	.+0      	; 0x4ee <LCD_Init+0x76>
 4ee:	00 00       	nop
 4f0:	86 e0       	ldi	r24, 0x06	; 6
 4f2:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_SendCommand>
 4f6:	8f ec       	ldi	r24, 0xCF	; 207
 4f8:	97 e0       	ldi	r25, 0x07	; 7
 4fa:	01 97       	sbiw	r24, 0x01	; 1
 4fc:	f1 f7       	brne	.-4      	; 0x4fa <LCD_Init+0x82>
 4fe:	00 c0       	rjmp	.+0      	; 0x500 <LCD_Init+0x88>
 500:	00 00       	nop
 502:	08 95       	ret

00000504 <LCD_SendChar>:
 504:	68 2f       	mov	r22, r24
 506:	83 e4       	ldi	r24, 0x43	; 67
 508:	0e 94 8d 01 	call	0x31a	; 0x31a <DIO_WritePort>
 50c:	41 e0       	ldi	r20, 0x01	; 1
 50e:	62 e0       	ldi	r22, 0x02	; 2
 510:	84 e4       	ldi	r24, 0x44	; 68
 512:	0e 94 0a 01 	call	0x214	; 0x214 <DIO_WritePin>
 516:	0e 94 13 02 	call	0x426	; 0x426 <LCD_Enable>
 51a:	08 95       	ret

0000051c <LCD_SendNumber>:
 51c:	1f 93       	push	r17
 51e:	cf 93       	push	r28
 520:	df 93       	push	r29
 522:	cd b7       	in	r28, 0x3d	; 61
 524:	de b7       	in	r29, 0x3e	; 62
 526:	2a 97       	sbiw	r28, 0x0a	; 10
 528:	0f b6       	in	r0, 0x3f	; 63
 52a:	f8 94       	cli
 52c:	de bf       	out	0x3e, r29	; 62
 52e:	0f be       	out	0x3f, r0	; 63
 530:	cd bf       	out	0x3d, r28	; 61
 532:	fc 01       	movw	r30, r24
 534:	89 2b       	or	r24, r25
 536:	99 f5       	brne	.+102    	; 0x59e <LCD_SendNumber+0x82>
 538:	4a c0       	rjmp	.+148    	; 0x5ce <LCD_SendNumber+0xb2>
 53a:	9f 01       	movw	r18, r30
 53c:	ad ec       	ldi	r26, 0xCD	; 205
 53e:	bc ec       	ldi	r27, 0xCC	; 204
 540:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <__umulhisi3>
 544:	96 95       	lsr	r25
 546:	87 95       	ror	r24
 548:	96 95       	lsr	r25
 54a:	87 95       	ror	r24
 54c:	96 95       	lsr	r25
 54e:	87 95       	ror	r24
 550:	9c 01       	movw	r18, r24
 552:	22 0f       	add	r18, r18
 554:	33 1f       	adc	r19, r19
 556:	88 0f       	add	r24, r24
 558:	99 1f       	adc	r25, r25
 55a:	88 0f       	add	r24, r24
 55c:	99 1f       	adc	r25, r25
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	82 0f       	add	r24, r18
 564:	93 1f       	adc	r25, r19
 566:	9f 01       	movw	r18, r30
 568:	28 1b       	sub	r18, r24
 56a:	39 0b       	sbc	r19, r25
 56c:	a1 e0       	ldi	r26, 0x01	; 1
 56e:	b0 e0       	ldi	r27, 0x00	; 0
 570:	ac 0f       	add	r26, r28
 572:	bd 1f       	adc	r27, r29
 574:	a1 0f       	add	r26, r17
 576:	b1 1d       	adc	r27, r1
 578:	17 fd       	sbrc	r17, 7
 57a:	ba 95       	dec	r27
 57c:	2c 93       	st	X, r18
 57e:	1f 5f       	subi	r17, 0xFF	; 255
 580:	9f 01       	movw	r18, r30
 582:	ad ec       	ldi	r26, 0xCD	; 205
 584:	bc ec       	ldi	r27, 0xCC	; 204
 586:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <__umulhisi3>
 58a:	fc 01       	movw	r30, r24
 58c:	f6 95       	lsr	r31
 58e:	e7 95       	ror	r30
 590:	f6 95       	lsr	r31
 592:	e7 95       	ror	r30
 594:	f6 95       	lsr	r31
 596:	e7 95       	ror	r30
 598:	4f 5f       	subi	r20, 0xFF	; 255
 59a:	5f 4f       	sbci	r21, 0xFF	; 255
 59c:	03 c0       	rjmp	.+6      	; 0x5a4 <LCD_SendNumber+0x88>
 59e:	40 e0       	ldi	r20, 0x00	; 0
 5a0:	50 e0       	ldi	r21, 0x00	; 0
 5a2:	10 e0       	ldi	r17, 0x00	; 0
 5a4:	30 97       	sbiw	r30, 0x00	; 0
 5a6:	49 f6       	brne	.-110    	; 0x53a <LCD_SendNumber+0x1e>
 5a8:	1f ef       	ldi	r17, 0xFF	; 255
 5aa:	14 0f       	add	r17, r20
 5ac:	0d c0       	rjmp	.+26     	; 0x5c8 <LCD_SendNumber+0xac>
 5ae:	e1 e0       	ldi	r30, 0x01	; 1
 5b0:	f0 e0       	ldi	r31, 0x00	; 0
 5b2:	ec 0f       	add	r30, r28
 5b4:	fd 1f       	adc	r31, r29
 5b6:	e1 0f       	add	r30, r17
 5b8:	f1 1d       	adc	r31, r1
 5ba:	17 fd       	sbrc	r17, 7
 5bc:	fa 95       	dec	r31
 5be:	80 81       	ld	r24, Z
 5c0:	80 5d       	subi	r24, 0xD0	; 208
 5c2:	0e 94 82 02 	call	0x504	; 0x504 <LCD_SendChar>
 5c6:	11 50       	subi	r17, 0x01	; 1
 5c8:	11 23       	and	r17, r17
 5ca:	8c f7       	brge	.-30     	; 0x5ae <LCD_SendNumber+0x92>
 5cc:	04 c0       	rjmp	.+8      	; 0x5d6 <LCD_SendNumber+0xba>
 5ce:	80 e3       	ldi	r24, 0x30	; 48
 5d0:	8e 0f       	add	r24, r30
 5d2:	0e 94 82 02 	call	0x504	; 0x504 <LCD_SendChar>
 5d6:	2a 96       	adiw	r28, 0x0a	; 10
 5d8:	0f b6       	in	r0, 0x3f	; 63
 5da:	f8 94       	cli
 5dc:	de bf       	out	0x3e, r29	; 62
 5de:	0f be       	out	0x3f, r0	; 63
 5e0:	cd bf       	out	0x3d, r28	; 61
 5e2:	df 91       	pop	r29
 5e4:	cf 91       	pop	r28
 5e6:	1f 91       	pop	r17
 5e8:	08 95       	ret

000005ea <LCD_SendString>:
void LCD_SendString(char *str)
{
 5ea:	cf 93       	push	r28
 5ec:	df 93       	push	r29
 5ee:	ec 01       	movw	r28, r24
	while((*str)!='\0')
 5f0:	03 c0       	rjmp	.+6      	; 0x5f8 <LCD_SendString+0xe>
	{
		LCD_SendChar(*str);
 5f2:	0e 94 82 02 	call	0x504	; 0x504 <LCD_SendChar>
		str++;
 5f6:	21 96       	adiw	r28, 0x01	; 1
	f_part=f_part*power(10,DIGITS);
	LCD_SendNumber(f_part);
}
void LCD_SendString(char *str)
{
	while((*str)!='\0')
 5f8:	88 81       	ld	r24, Y
 5fa:	81 11       	cpse	r24, r1
 5fc:	fa cf       	rjmp	.-12     	; 0x5f2 <LCD_SendString+0x8>
	{
		LCD_SendChar(*str);
		str++;
	}
}
 5fe:	df 91       	pop	r29
 600:	cf 91       	pop	r28
 602:	08 95       	ret

00000604 <LED_Init>:
/**********************************************************************************************/
#include "DIO_interface.h"
#include "Definitions.h"
void LED_Init(uint8_t port,uint8_t pin)
{
	DIO_SetPinDir(port,pin,OUTPUT);
 604:	41 e0       	ldi	r20, 0x01	; 1
 606:	0e 94 9a 00 	call	0x134	; 0x134 <DIO_SetPinDir>
 60a:	08 95       	ret

0000060c <LED_On>:
}
void LED_On(uint8_t port,uint8_t pin)
{
	DIO_WritePin(port,pin,1);
 60c:	41 e0       	ldi	r20, 0x01	; 1
 60e:	0e 94 0a 01 	call	0x214	; 0x214 <DIO_WritePin>
 612:	08 95       	ret

00000614 <LED_Off>:
}
void LED_Off(uint8_t port,uint8_t pin)
{
	DIO_WritePin(port,pin,0);
 614:	40 e0       	ldi	r20, 0x00	; 0
 616:	0e 94 0a 01 	call	0x214	; 0x214 <DIO_WritePin>
 61a:	08 95       	ret

0000061c <main>:

float temp;

int main(void)
{
	ADC_Init(A0);
 61c:	80 e0       	ldi	r24, 0x00	; 0
 61e:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Init>
	
	LCD_Init();
 622:	0e 94 3c 02 	call	0x478	; 0x478 <LCD_Init>
	
	LED_Init(portb, pin7);
 626:	67 e0       	ldi	r22, 0x07	; 7
 628:	82 e4       	ldi	r24, 0x42	; 66
 62a:	0e 94 02 03 	call	0x604	; 0x604 <LED_Init>
	
	EXTI_vEnable(EXTI2);
 62e:	82 e0       	ldi	r24, 0x02	; 2
 630:	0e 94 a0 01 	call	0x340	; 0x340 <EXTI_vEnable>
	EXTI_vActiveMode(EXTI2, RISING);
 634:	61 e0       	ldi	r22, 0x01	; 1
 636:	82 e0       	ldi	r24, 0x02	; 2
 638:	0e 94 b2 01 	call	0x364	; 0x364 <EXTI_vActiveMode>
	
	while(1)
	{
		temp = ADC_Read(A0);
 63c:	80 e0       	ldi	r24, 0x00	; 0
 63e:	0e 94 8e 00 	call	0x11c	; 0x11c <ADC_Read>
 642:	bc 01       	movw	r22, r24
 644:	80 e0       	ldi	r24, 0x00	; 0
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	0e 94 c6 04 	call	0x98c	; 0x98c <__floatunsisf>
		temp = (temp * vref) / (1024 * 0.01);
 64c:	20 e0       	ldi	r18, 0x00	; 0
 64e:	30 e0       	ldi	r19, 0x00	; 0
 650:	40 ea       	ldi	r20, 0xA0	; 160
 652:	50 e4       	ldi	r21, 0x40	; 64
 654:	0e 94 59 05 	call	0xab2	; 0xab2 <__mulsf3>
 658:	2a e0       	ldi	r18, 0x0A	; 10
 65a:	37 ed       	ldi	r19, 0xD7	; 215
 65c:	43 e2       	ldi	r20, 0x23	; 35
 65e:	51 e4       	ldi	r21, 0x41	; 65
 660:	0e 94 25 04 	call	0x84a	; 0x84a <__divsf3>
 664:	60 93 69 00 	sts	0x0069, r22	; 0x800069 <temp>
 668:	70 93 6a 00 	sts	0x006A, r23	; 0x80006a <temp+0x1>
 66c:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <temp+0x2>
 670:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <temp+0x3>
		
		if(temp >= 25)
 674:	20 e0       	ldi	r18, 0x00	; 0
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	48 ec       	ldi	r20, 0xC8	; 200
 67a:	51 e4       	ldi	r21, 0x41	; 65
 67c:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__gesf2>
 680:	88 23       	and	r24, r24
 682:	2c f0       	brlt	.+10     	; 0x68e <main+0x72>
		{
			LED_On(portb, pin7);
 684:	67 e0       	ldi	r22, 0x07	; 7
 686:	82 e4       	ldi	r24, 0x42	; 66
 688:	0e 94 06 03 	call	0x60c	; 0x60c <LED_On>
 68c:	1a c0       	rjmp	.+52     	; 0x6c2 <main+0xa6>
		}
		else
		{
			LED_Off(portb, pin7);
 68e:	67 e0       	ldi	r22, 0x07	; 7
 690:	82 e4       	ldi	r24, 0x42	; 66
 692:	0e 94 0a 03 	call	0x614	; 0x614 <LED_Off>
			temp++;
 696:	20 e0       	ldi	r18, 0x00	; 0
 698:	30 e0       	ldi	r19, 0x00	; 0
 69a:	40 e8       	ldi	r20, 0x80	; 128
 69c:	5f e3       	ldi	r21, 0x3F	; 63
 69e:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <temp>
 6a2:	70 91 6a 00 	lds	r23, 0x006A	; 0x80006a <temp+0x1>
 6a6:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <temp+0x2>
 6aa:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <temp+0x3>
 6ae:	0e 94 b9 03 	call	0x772	; 0x772 <__addsf3>
 6b2:	60 93 69 00 	sts	0x0069, r22	; 0x800069 <temp>
 6b6:	70 93 6a 00 	sts	0x006A, r23	; 0x80006a <temp+0x1>
 6ba:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <temp+0x2>
 6be:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <temp+0x3>
		}
		
		if(toggle_degree % 2 != 0)
 6c2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 6c6:	80 ff       	sbrs	r24, 0
 6c8:	26 c0       	rjmp	.+76     	; 0x716 <main+0xfa>
		{
			temp = (temp * 9/5) + 32;
 6ca:	20 e0       	ldi	r18, 0x00	; 0
 6cc:	30 e0       	ldi	r19, 0x00	; 0
 6ce:	40 e1       	ldi	r20, 0x10	; 16
 6d0:	51 e4       	ldi	r21, 0x41	; 65
 6d2:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <temp>
 6d6:	70 91 6a 00 	lds	r23, 0x006A	; 0x80006a <temp+0x1>
 6da:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <temp+0x2>
 6de:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <temp+0x3>
 6e2:	0e 94 59 05 	call	0xab2	; 0xab2 <__mulsf3>
 6e6:	20 e0       	ldi	r18, 0x00	; 0
 6e8:	30 e0       	ldi	r19, 0x00	; 0
 6ea:	40 ea       	ldi	r20, 0xA0	; 160
 6ec:	50 e4       	ldi	r21, 0x40	; 64
 6ee:	0e 94 25 04 	call	0x84a	; 0x84a <__divsf3>
 6f2:	20 e0       	ldi	r18, 0x00	; 0
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	40 e0       	ldi	r20, 0x00	; 0
 6f8:	52 e4       	ldi	r21, 0x42	; 66
 6fa:	0e 94 b9 03 	call	0x772	; 0x772 <__addsf3>
 6fe:	60 93 69 00 	sts	0x0069, r22	; 0x800069 <temp>
 702:	70 93 6a 00 	sts	0x006A, r23	; 0x80006a <temp+0x1>
 706:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <temp+0x2>
 70a:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <temp+0x3>
			degree = 'F';
 70e:	86 e4       	ldi	r24, 0x46	; 70
 710:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 714:	03 c0       	rjmp	.+6      	; 0x71c <main+0x100>
		}
		else
		{
			degree = 'C';
 716:	83 e4       	ldi	r24, 0x43	; 67
 718:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		
		LCD_SendCommand(RETURN_HOME);
 71c:	82 e0       	ldi	r24, 0x02	; 2
 71e:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_SendCommand>
		LCD_SendString("Temp: ");
 722:	81 e6       	ldi	r24, 0x61	; 97
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LCD_SendString>
		LCD_SendNumber(temp);
 72a:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <temp>
 72e:	70 91 6a 00 	lds	r23, 0x006A	; 0x80006a <temp+0x1>
 732:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <temp+0x2>
 736:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <temp+0x3>
 73a:	0e 94 97 04 	call	0x92e	; 0x92e <__fixunssfsi>
 73e:	cb 01       	movw	r24, r22
 740:	0e 94 8e 02 	call	0x51c	; 0x51c <LCD_SendNumber>
		LCD_SendChar(degree);
 744:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 748:	0e 94 82 02 	call	0x504	; 0x504 <LCD_SendChar>
	}
 74c:	77 cf       	rjmp	.-274    	; 0x63c <main+0x20>

0000074e <__vector_3>:
}

ISR(INT2_vect)
{
 74e:	1f 92       	push	r1
 750:	0f 92       	push	r0
 752:	0f b6       	in	r0, 0x3f	; 63
 754:	0f 92       	push	r0
 756:	11 24       	eor	r1, r1
 758:	8f 93       	push	r24
	toggle_degree++;
 75a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 75e:	8f 5f       	subi	r24, 0xFF	; 255
 760:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
 764:	8f 91       	pop	r24
 766:	0f 90       	pop	r0
 768:	0f be       	out	0x3f, r0	; 63
 76a:	0f 90       	pop	r0
 76c:	1f 90       	pop	r1
 76e:	18 95       	reti

00000770 <__subsf3>:
 770:	50 58       	subi	r21, 0x80	; 128

00000772 <__addsf3>:
 772:	bb 27       	eor	r27, r27
 774:	aa 27       	eor	r26, r26
 776:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__addsf3x>
 77a:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__fp_round>
 77e:	0e 94 0c 05 	call	0xa18	; 0xa18 <__fp_pscA>
 782:	38 f0       	brcs	.+14     	; 0x792 <__addsf3+0x20>
 784:	0e 94 13 05 	call	0xa26	; 0xa26 <__fp_pscB>
 788:	20 f0       	brcs	.+8      	; 0x792 <__addsf3+0x20>
 78a:	39 f4       	brne	.+14     	; 0x79a <__addsf3+0x28>
 78c:	9f 3f       	cpi	r25, 0xFF	; 255
 78e:	19 f4       	brne	.+6      	; 0x796 <__addsf3+0x24>
 790:	26 f4       	brtc	.+8      	; 0x79a <__addsf3+0x28>
 792:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__fp_nan>
 796:	0e f4       	brtc	.+2      	; 0x79a <__addsf3+0x28>
 798:	e0 95       	com	r30
 79a:	e7 fb       	bst	r30, 7
 79c:	0c 94 03 05 	jmp	0xa06	; 0xa06 <__fp_inf>

000007a0 <__addsf3x>:
 7a0:	e9 2f       	mov	r30, r25
 7a2:	0e 94 2b 05 	call	0xa56	; 0xa56 <__fp_split3>
 7a6:	58 f3       	brcs	.-42     	; 0x77e <__addsf3+0xc>
 7a8:	ba 17       	cp	r27, r26
 7aa:	62 07       	cpc	r22, r18
 7ac:	73 07       	cpc	r23, r19
 7ae:	84 07       	cpc	r24, r20
 7b0:	95 07       	cpc	r25, r21
 7b2:	20 f0       	brcs	.+8      	; 0x7bc <__addsf3x+0x1c>
 7b4:	79 f4       	brne	.+30     	; 0x7d4 <__addsf3x+0x34>
 7b6:	a6 f5       	brtc	.+104    	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 7b8:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__fp_zero>
 7bc:	0e f4       	brtc	.+2      	; 0x7c0 <__addsf3x+0x20>
 7be:	e0 95       	com	r30
 7c0:	0b 2e       	mov	r0, r27
 7c2:	ba 2f       	mov	r27, r26
 7c4:	a0 2d       	mov	r26, r0
 7c6:	0b 01       	movw	r0, r22
 7c8:	b9 01       	movw	r22, r18
 7ca:	90 01       	movw	r18, r0
 7cc:	0c 01       	movw	r0, r24
 7ce:	ca 01       	movw	r24, r20
 7d0:	a0 01       	movw	r20, r0
 7d2:	11 24       	eor	r1, r1
 7d4:	ff 27       	eor	r31, r31
 7d6:	59 1b       	sub	r21, r25
 7d8:	99 f0       	breq	.+38     	; 0x800 <__DATA_REGION_LENGTH__>
 7da:	59 3f       	cpi	r21, 0xF9	; 249
 7dc:	50 f4       	brcc	.+20     	; 0x7f2 <__addsf3x+0x52>
 7de:	50 3e       	cpi	r21, 0xE0	; 224
 7e0:	68 f1       	brcs	.+90     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 7e2:	1a 16       	cp	r1, r26
 7e4:	f0 40       	sbci	r31, 0x00	; 0
 7e6:	a2 2f       	mov	r26, r18
 7e8:	23 2f       	mov	r18, r19
 7ea:	34 2f       	mov	r19, r20
 7ec:	44 27       	eor	r20, r20
 7ee:	58 5f       	subi	r21, 0xF8	; 248
 7f0:	f3 cf       	rjmp	.-26     	; 0x7d8 <__addsf3x+0x38>
 7f2:	46 95       	lsr	r20
 7f4:	37 95       	ror	r19
 7f6:	27 95       	ror	r18
 7f8:	a7 95       	ror	r26
 7fa:	f0 40       	sbci	r31, 0x00	; 0
 7fc:	53 95       	inc	r21
 7fe:	c9 f7       	brne	.-14     	; 0x7f2 <__addsf3x+0x52>
 800:	7e f4       	brtc	.+30     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 802:	1f 16       	cp	r1, r31
 804:	ba 0b       	sbc	r27, r26
 806:	62 0b       	sbc	r22, r18
 808:	73 0b       	sbc	r23, r19
 80a:	84 0b       	sbc	r24, r20
 80c:	ba f0       	brmi	.+46     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 80e:	91 50       	subi	r25, 0x01	; 1
 810:	a1 f0       	breq	.+40     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 812:	ff 0f       	add	r31, r31
 814:	bb 1f       	adc	r27, r27
 816:	66 1f       	adc	r22, r22
 818:	77 1f       	adc	r23, r23
 81a:	88 1f       	adc	r24, r24
 81c:	c2 f7       	brpl	.-16     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 81e:	0e c0       	rjmp	.+28     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 820:	ba 0f       	add	r27, r26
 822:	62 1f       	adc	r22, r18
 824:	73 1f       	adc	r23, r19
 826:	84 1f       	adc	r24, r20
 828:	48 f4       	brcc	.+18     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 82a:	87 95       	ror	r24
 82c:	77 95       	ror	r23
 82e:	67 95       	ror	r22
 830:	b7 95       	ror	r27
 832:	f7 95       	ror	r31
 834:	9e 3f       	cpi	r25, 0xFE	; 254
 836:	08 f0       	brcs	.+2      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 838:	b0 cf       	rjmp	.-160    	; 0x79a <__addsf3+0x28>
 83a:	93 95       	inc	r25
 83c:	88 0f       	add	r24, r24
 83e:	08 f0       	brcs	.+2      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 840:	99 27       	eor	r25, r25
 842:	ee 0f       	add	r30, r30
 844:	97 95       	ror	r25
 846:	87 95       	ror	r24
 848:	08 95       	ret

0000084a <__divsf3>:
 84a:	0e 94 39 04 	call	0x872	; 0x872 <__divsf3x>
 84e:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__fp_round>
 852:	0e 94 13 05 	call	0xa26	; 0xa26 <__fp_pscB>
 856:	58 f0       	brcs	.+22     	; 0x86e <__stack+0xf>
 858:	0e 94 0c 05 	call	0xa18	; 0xa18 <__fp_pscA>
 85c:	40 f0       	brcs	.+16     	; 0x86e <__stack+0xf>
 85e:	29 f4       	brne	.+10     	; 0x86a <__stack+0xb>
 860:	5f 3f       	cpi	r21, 0xFF	; 255
 862:	29 f0       	breq	.+10     	; 0x86e <__stack+0xf>
 864:	0c 94 03 05 	jmp	0xa06	; 0xa06 <__fp_inf>
 868:	51 11       	cpse	r21, r1
 86a:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__fp_szero>
 86e:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__fp_nan>

00000872 <__divsf3x>:
 872:	0e 94 2b 05 	call	0xa56	; 0xa56 <__fp_split3>
 876:	68 f3       	brcs	.-38     	; 0x852 <__divsf3+0x8>

00000878 <__divsf3_pse>:
 878:	99 23       	and	r25, r25
 87a:	b1 f3       	breq	.-20     	; 0x868 <__stack+0x9>
 87c:	55 23       	and	r21, r21
 87e:	91 f3       	breq	.-28     	; 0x864 <__stack+0x5>
 880:	95 1b       	sub	r25, r21
 882:	55 0b       	sbc	r21, r21
 884:	bb 27       	eor	r27, r27
 886:	aa 27       	eor	r26, r26
 888:	62 17       	cp	r22, r18
 88a:	73 07       	cpc	r23, r19
 88c:	84 07       	cpc	r24, r20
 88e:	38 f0       	brcs	.+14     	; 0x89e <__divsf3_pse+0x26>
 890:	9f 5f       	subi	r25, 0xFF	; 255
 892:	5f 4f       	sbci	r21, 0xFF	; 255
 894:	22 0f       	add	r18, r18
 896:	33 1f       	adc	r19, r19
 898:	44 1f       	adc	r20, r20
 89a:	aa 1f       	adc	r26, r26
 89c:	a9 f3       	breq	.-22     	; 0x888 <__divsf3_pse+0x10>
 89e:	35 d0       	rcall	.+106    	; 0x90a <__divsf3_pse+0x92>
 8a0:	0e 2e       	mov	r0, r30
 8a2:	3a f0       	brmi	.+14     	; 0x8b2 <__divsf3_pse+0x3a>
 8a4:	e0 e8       	ldi	r30, 0x80	; 128
 8a6:	32 d0       	rcall	.+100    	; 0x90c <__divsf3_pse+0x94>
 8a8:	91 50       	subi	r25, 0x01	; 1
 8aa:	50 40       	sbci	r21, 0x00	; 0
 8ac:	e6 95       	lsr	r30
 8ae:	00 1c       	adc	r0, r0
 8b0:	ca f7       	brpl	.-14     	; 0x8a4 <__divsf3_pse+0x2c>
 8b2:	2b d0       	rcall	.+86     	; 0x90a <__divsf3_pse+0x92>
 8b4:	fe 2f       	mov	r31, r30
 8b6:	29 d0       	rcall	.+82     	; 0x90a <__divsf3_pse+0x92>
 8b8:	66 0f       	add	r22, r22
 8ba:	77 1f       	adc	r23, r23
 8bc:	88 1f       	adc	r24, r24
 8be:	bb 1f       	adc	r27, r27
 8c0:	26 17       	cp	r18, r22
 8c2:	37 07       	cpc	r19, r23
 8c4:	48 07       	cpc	r20, r24
 8c6:	ab 07       	cpc	r26, r27
 8c8:	b0 e8       	ldi	r27, 0x80	; 128
 8ca:	09 f0       	breq	.+2      	; 0x8ce <__divsf3_pse+0x56>
 8cc:	bb 0b       	sbc	r27, r27
 8ce:	80 2d       	mov	r24, r0
 8d0:	bf 01       	movw	r22, r30
 8d2:	ff 27       	eor	r31, r31
 8d4:	93 58       	subi	r25, 0x83	; 131
 8d6:	5f 4f       	sbci	r21, 0xFF	; 255
 8d8:	3a f0       	brmi	.+14     	; 0x8e8 <__divsf3_pse+0x70>
 8da:	9e 3f       	cpi	r25, 0xFE	; 254
 8dc:	51 05       	cpc	r21, r1
 8de:	78 f0       	brcs	.+30     	; 0x8fe <__divsf3_pse+0x86>
 8e0:	0c 94 03 05 	jmp	0xa06	; 0xa06 <__fp_inf>
 8e4:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__fp_szero>
 8e8:	5f 3f       	cpi	r21, 0xFF	; 255
 8ea:	e4 f3       	brlt	.-8      	; 0x8e4 <__divsf3_pse+0x6c>
 8ec:	98 3e       	cpi	r25, 0xE8	; 232
 8ee:	d4 f3       	brlt	.-12     	; 0x8e4 <__divsf3_pse+0x6c>
 8f0:	86 95       	lsr	r24
 8f2:	77 95       	ror	r23
 8f4:	67 95       	ror	r22
 8f6:	b7 95       	ror	r27
 8f8:	f7 95       	ror	r31
 8fa:	9f 5f       	subi	r25, 0xFF	; 255
 8fc:	c9 f7       	brne	.-14     	; 0x8f0 <__divsf3_pse+0x78>
 8fe:	88 0f       	add	r24, r24
 900:	91 1d       	adc	r25, r1
 902:	96 95       	lsr	r25
 904:	87 95       	ror	r24
 906:	97 f9       	bld	r25, 7
 908:	08 95       	ret
 90a:	e1 e0       	ldi	r30, 0x01	; 1
 90c:	66 0f       	add	r22, r22
 90e:	77 1f       	adc	r23, r23
 910:	88 1f       	adc	r24, r24
 912:	bb 1f       	adc	r27, r27
 914:	62 17       	cp	r22, r18
 916:	73 07       	cpc	r23, r19
 918:	84 07       	cpc	r24, r20
 91a:	ba 07       	cpc	r27, r26
 91c:	20 f0       	brcs	.+8      	; 0x926 <__divsf3_pse+0xae>
 91e:	62 1b       	sub	r22, r18
 920:	73 0b       	sbc	r23, r19
 922:	84 0b       	sbc	r24, r20
 924:	ba 0b       	sbc	r27, r26
 926:	ee 1f       	adc	r30, r30
 928:	88 f7       	brcc	.-30     	; 0x90c <__divsf3_pse+0x94>
 92a:	e0 95       	com	r30
 92c:	08 95       	ret

0000092e <__fixunssfsi>:
 92e:	0e 94 33 05 	call	0xa66	; 0xa66 <__fp_splitA>
 932:	88 f0       	brcs	.+34     	; 0x956 <__fixunssfsi+0x28>
 934:	9f 57       	subi	r25, 0x7F	; 127
 936:	98 f0       	brcs	.+38     	; 0x95e <__fixunssfsi+0x30>
 938:	b9 2f       	mov	r27, r25
 93a:	99 27       	eor	r25, r25
 93c:	b7 51       	subi	r27, 0x17	; 23
 93e:	b0 f0       	brcs	.+44     	; 0x96c <__fixunssfsi+0x3e>
 940:	e1 f0       	breq	.+56     	; 0x97a <__fixunssfsi+0x4c>
 942:	66 0f       	add	r22, r22
 944:	77 1f       	adc	r23, r23
 946:	88 1f       	adc	r24, r24
 948:	99 1f       	adc	r25, r25
 94a:	1a f0       	brmi	.+6      	; 0x952 <__fixunssfsi+0x24>
 94c:	ba 95       	dec	r27
 94e:	c9 f7       	brne	.-14     	; 0x942 <__fixunssfsi+0x14>
 950:	14 c0       	rjmp	.+40     	; 0x97a <__fixunssfsi+0x4c>
 952:	b1 30       	cpi	r27, 0x01	; 1
 954:	91 f0       	breq	.+36     	; 0x97a <__fixunssfsi+0x4c>
 956:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__fp_zero>
 95a:	b1 e0       	ldi	r27, 0x01	; 1
 95c:	08 95       	ret
 95e:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__fp_zero>
 962:	67 2f       	mov	r22, r23
 964:	78 2f       	mov	r23, r24
 966:	88 27       	eor	r24, r24
 968:	b8 5f       	subi	r27, 0xF8	; 248
 96a:	39 f0       	breq	.+14     	; 0x97a <__fixunssfsi+0x4c>
 96c:	b9 3f       	cpi	r27, 0xF9	; 249
 96e:	cc f3       	brlt	.-14     	; 0x962 <__fixunssfsi+0x34>
 970:	86 95       	lsr	r24
 972:	77 95       	ror	r23
 974:	67 95       	ror	r22
 976:	b3 95       	inc	r27
 978:	d9 f7       	brne	.-10     	; 0x970 <__fixunssfsi+0x42>
 97a:	3e f4       	brtc	.+14     	; 0x98a <__fixunssfsi+0x5c>
 97c:	90 95       	com	r25
 97e:	80 95       	com	r24
 980:	70 95       	com	r23
 982:	61 95       	neg	r22
 984:	7f 4f       	sbci	r23, 0xFF	; 255
 986:	8f 4f       	sbci	r24, 0xFF	; 255
 988:	9f 4f       	sbci	r25, 0xFF	; 255
 98a:	08 95       	ret

0000098c <__floatunsisf>:
 98c:	e8 94       	clt
 98e:	09 c0       	rjmp	.+18     	; 0x9a2 <__floatsisf+0x12>

00000990 <__floatsisf>:
 990:	97 fb       	bst	r25, 7
 992:	3e f4       	brtc	.+14     	; 0x9a2 <__floatsisf+0x12>
 994:	90 95       	com	r25
 996:	80 95       	com	r24
 998:	70 95       	com	r23
 99a:	61 95       	neg	r22
 99c:	7f 4f       	sbci	r23, 0xFF	; 255
 99e:	8f 4f       	sbci	r24, 0xFF	; 255
 9a0:	9f 4f       	sbci	r25, 0xFF	; 255
 9a2:	99 23       	and	r25, r25
 9a4:	a9 f0       	breq	.+42     	; 0x9d0 <__floatsisf+0x40>
 9a6:	f9 2f       	mov	r31, r25
 9a8:	96 e9       	ldi	r25, 0x96	; 150
 9aa:	bb 27       	eor	r27, r27
 9ac:	93 95       	inc	r25
 9ae:	f6 95       	lsr	r31
 9b0:	87 95       	ror	r24
 9b2:	77 95       	ror	r23
 9b4:	67 95       	ror	r22
 9b6:	b7 95       	ror	r27
 9b8:	f1 11       	cpse	r31, r1
 9ba:	f8 cf       	rjmp	.-16     	; 0x9ac <__floatsisf+0x1c>
 9bc:	fa f4       	brpl	.+62     	; 0x9fc <__floatsisf+0x6c>
 9be:	bb 0f       	add	r27, r27
 9c0:	11 f4       	brne	.+4      	; 0x9c6 <__floatsisf+0x36>
 9c2:	60 ff       	sbrs	r22, 0
 9c4:	1b c0       	rjmp	.+54     	; 0x9fc <__floatsisf+0x6c>
 9c6:	6f 5f       	subi	r22, 0xFF	; 255
 9c8:	7f 4f       	sbci	r23, 0xFF	; 255
 9ca:	8f 4f       	sbci	r24, 0xFF	; 255
 9cc:	9f 4f       	sbci	r25, 0xFF	; 255
 9ce:	16 c0       	rjmp	.+44     	; 0x9fc <__floatsisf+0x6c>
 9d0:	88 23       	and	r24, r24
 9d2:	11 f0       	breq	.+4      	; 0x9d8 <__floatsisf+0x48>
 9d4:	96 e9       	ldi	r25, 0x96	; 150
 9d6:	11 c0       	rjmp	.+34     	; 0x9fa <__floatsisf+0x6a>
 9d8:	77 23       	and	r23, r23
 9da:	21 f0       	breq	.+8      	; 0x9e4 <__floatsisf+0x54>
 9dc:	9e e8       	ldi	r25, 0x8E	; 142
 9de:	87 2f       	mov	r24, r23
 9e0:	76 2f       	mov	r23, r22
 9e2:	05 c0       	rjmp	.+10     	; 0x9ee <__floatsisf+0x5e>
 9e4:	66 23       	and	r22, r22
 9e6:	71 f0       	breq	.+28     	; 0xa04 <__floatsisf+0x74>
 9e8:	96 e8       	ldi	r25, 0x86	; 134
 9ea:	86 2f       	mov	r24, r22
 9ec:	70 e0       	ldi	r23, 0x00	; 0
 9ee:	60 e0       	ldi	r22, 0x00	; 0
 9f0:	2a f0       	brmi	.+10     	; 0x9fc <__floatsisf+0x6c>
 9f2:	9a 95       	dec	r25
 9f4:	66 0f       	add	r22, r22
 9f6:	77 1f       	adc	r23, r23
 9f8:	88 1f       	adc	r24, r24
 9fa:	da f7       	brpl	.-10     	; 0x9f2 <__floatsisf+0x62>
 9fc:	88 0f       	add	r24, r24
 9fe:	96 95       	lsr	r25
 a00:	87 95       	ror	r24
 a02:	97 f9       	bld	r25, 7
 a04:	08 95       	ret

00000a06 <__fp_inf>:
 a06:	97 f9       	bld	r25, 7
 a08:	9f 67       	ori	r25, 0x7F	; 127
 a0a:	80 e8       	ldi	r24, 0x80	; 128
 a0c:	70 e0       	ldi	r23, 0x00	; 0
 a0e:	60 e0       	ldi	r22, 0x00	; 0
 a10:	08 95       	ret

00000a12 <__fp_nan>:
 a12:	9f ef       	ldi	r25, 0xFF	; 255
 a14:	80 ec       	ldi	r24, 0xC0	; 192
 a16:	08 95       	ret

00000a18 <__fp_pscA>:
 a18:	00 24       	eor	r0, r0
 a1a:	0a 94       	dec	r0
 a1c:	16 16       	cp	r1, r22
 a1e:	17 06       	cpc	r1, r23
 a20:	18 06       	cpc	r1, r24
 a22:	09 06       	cpc	r0, r25
 a24:	08 95       	ret

00000a26 <__fp_pscB>:
 a26:	00 24       	eor	r0, r0
 a28:	0a 94       	dec	r0
 a2a:	12 16       	cp	r1, r18
 a2c:	13 06       	cpc	r1, r19
 a2e:	14 06       	cpc	r1, r20
 a30:	05 06       	cpc	r0, r21
 a32:	08 95       	ret

00000a34 <__fp_round>:
 a34:	09 2e       	mov	r0, r25
 a36:	03 94       	inc	r0
 a38:	00 0c       	add	r0, r0
 a3a:	11 f4       	brne	.+4      	; 0xa40 <__fp_round+0xc>
 a3c:	88 23       	and	r24, r24
 a3e:	52 f0       	brmi	.+20     	; 0xa54 <__fp_round+0x20>
 a40:	bb 0f       	add	r27, r27
 a42:	40 f4       	brcc	.+16     	; 0xa54 <__fp_round+0x20>
 a44:	bf 2b       	or	r27, r31
 a46:	11 f4       	brne	.+4      	; 0xa4c <__fp_round+0x18>
 a48:	60 ff       	sbrs	r22, 0
 a4a:	04 c0       	rjmp	.+8      	; 0xa54 <__fp_round+0x20>
 a4c:	6f 5f       	subi	r22, 0xFF	; 255
 a4e:	7f 4f       	sbci	r23, 0xFF	; 255
 a50:	8f 4f       	sbci	r24, 0xFF	; 255
 a52:	9f 4f       	sbci	r25, 0xFF	; 255
 a54:	08 95       	ret

00000a56 <__fp_split3>:
 a56:	57 fd       	sbrc	r21, 7
 a58:	90 58       	subi	r25, 0x80	; 128
 a5a:	44 0f       	add	r20, r20
 a5c:	55 1f       	adc	r21, r21
 a5e:	59 f0       	breq	.+22     	; 0xa76 <__fp_splitA+0x10>
 a60:	5f 3f       	cpi	r21, 0xFF	; 255
 a62:	71 f0       	breq	.+28     	; 0xa80 <__fp_splitA+0x1a>
 a64:	47 95       	ror	r20

00000a66 <__fp_splitA>:
 a66:	88 0f       	add	r24, r24
 a68:	97 fb       	bst	r25, 7
 a6a:	99 1f       	adc	r25, r25
 a6c:	61 f0       	breq	.+24     	; 0xa86 <__fp_splitA+0x20>
 a6e:	9f 3f       	cpi	r25, 0xFF	; 255
 a70:	79 f0       	breq	.+30     	; 0xa90 <__fp_splitA+0x2a>
 a72:	87 95       	ror	r24
 a74:	08 95       	ret
 a76:	12 16       	cp	r1, r18
 a78:	13 06       	cpc	r1, r19
 a7a:	14 06       	cpc	r1, r20
 a7c:	55 1f       	adc	r21, r21
 a7e:	f2 cf       	rjmp	.-28     	; 0xa64 <__fp_split3+0xe>
 a80:	46 95       	lsr	r20
 a82:	f1 df       	rcall	.-30     	; 0xa66 <__fp_splitA>
 a84:	08 c0       	rjmp	.+16     	; 0xa96 <__fp_splitA+0x30>
 a86:	16 16       	cp	r1, r22
 a88:	17 06       	cpc	r1, r23
 a8a:	18 06       	cpc	r1, r24
 a8c:	99 1f       	adc	r25, r25
 a8e:	f1 cf       	rjmp	.-30     	; 0xa72 <__fp_splitA+0xc>
 a90:	86 95       	lsr	r24
 a92:	71 05       	cpc	r23, r1
 a94:	61 05       	cpc	r22, r1
 a96:	08 94       	sec
 a98:	08 95       	ret

00000a9a <__fp_zero>:
 a9a:	e8 94       	clt

00000a9c <__fp_szero>:
 a9c:	bb 27       	eor	r27, r27
 a9e:	66 27       	eor	r22, r22
 aa0:	77 27       	eor	r23, r23
 aa2:	cb 01       	movw	r24, r22
 aa4:	97 f9       	bld	r25, 7
 aa6:	08 95       	ret

00000aa8 <__gesf2>:
 aa8:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__fp_cmp>
 aac:	08 f4       	brcc	.+2      	; 0xab0 <__gesf2+0x8>
 aae:	8f ef       	ldi	r24, 0xFF	; 255
 ab0:	08 95       	ret

00000ab2 <__mulsf3>:
 ab2:	0e 94 6c 05 	call	0xad8	; 0xad8 <__mulsf3x>
 ab6:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__fp_round>
 aba:	0e 94 0c 05 	call	0xa18	; 0xa18 <__fp_pscA>
 abe:	38 f0       	brcs	.+14     	; 0xace <__mulsf3+0x1c>
 ac0:	0e 94 13 05 	call	0xa26	; 0xa26 <__fp_pscB>
 ac4:	20 f0       	brcs	.+8      	; 0xace <__mulsf3+0x1c>
 ac6:	95 23       	and	r25, r21
 ac8:	11 f0       	breq	.+4      	; 0xace <__mulsf3+0x1c>
 aca:	0c 94 03 05 	jmp	0xa06	; 0xa06 <__fp_inf>
 ace:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__fp_nan>
 ad2:	11 24       	eor	r1, r1
 ad4:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__fp_szero>

00000ad8 <__mulsf3x>:
 ad8:	0e 94 2b 05 	call	0xa56	; 0xa56 <__fp_split3>
 adc:	70 f3       	brcs	.-36     	; 0xaba <__mulsf3+0x8>

00000ade <__mulsf3_pse>:
 ade:	95 9f       	mul	r25, r21
 ae0:	c1 f3       	breq	.-16     	; 0xad2 <__mulsf3+0x20>
 ae2:	95 0f       	add	r25, r21
 ae4:	50 e0       	ldi	r21, 0x00	; 0
 ae6:	55 1f       	adc	r21, r21
 ae8:	62 9f       	mul	r22, r18
 aea:	f0 01       	movw	r30, r0
 aec:	72 9f       	mul	r23, r18
 aee:	bb 27       	eor	r27, r27
 af0:	f0 0d       	add	r31, r0
 af2:	b1 1d       	adc	r27, r1
 af4:	63 9f       	mul	r22, r19
 af6:	aa 27       	eor	r26, r26
 af8:	f0 0d       	add	r31, r0
 afa:	b1 1d       	adc	r27, r1
 afc:	aa 1f       	adc	r26, r26
 afe:	64 9f       	mul	r22, r20
 b00:	66 27       	eor	r22, r22
 b02:	b0 0d       	add	r27, r0
 b04:	a1 1d       	adc	r26, r1
 b06:	66 1f       	adc	r22, r22
 b08:	82 9f       	mul	r24, r18
 b0a:	22 27       	eor	r18, r18
 b0c:	b0 0d       	add	r27, r0
 b0e:	a1 1d       	adc	r26, r1
 b10:	62 1f       	adc	r22, r18
 b12:	73 9f       	mul	r23, r19
 b14:	b0 0d       	add	r27, r0
 b16:	a1 1d       	adc	r26, r1
 b18:	62 1f       	adc	r22, r18
 b1a:	83 9f       	mul	r24, r19
 b1c:	a0 0d       	add	r26, r0
 b1e:	61 1d       	adc	r22, r1
 b20:	22 1f       	adc	r18, r18
 b22:	74 9f       	mul	r23, r20
 b24:	33 27       	eor	r19, r19
 b26:	a0 0d       	add	r26, r0
 b28:	61 1d       	adc	r22, r1
 b2a:	23 1f       	adc	r18, r19
 b2c:	84 9f       	mul	r24, r20
 b2e:	60 0d       	add	r22, r0
 b30:	21 1d       	adc	r18, r1
 b32:	82 2f       	mov	r24, r18
 b34:	76 2f       	mov	r23, r22
 b36:	6a 2f       	mov	r22, r26
 b38:	11 24       	eor	r1, r1
 b3a:	9f 57       	subi	r25, 0x7F	; 127
 b3c:	50 40       	sbci	r21, 0x00	; 0
 b3e:	9a f0       	brmi	.+38     	; 0xb66 <__mulsf3_pse+0x88>
 b40:	f1 f0       	breq	.+60     	; 0xb7e <__mulsf3_pse+0xa0>
 b42:	88 23       	and	r24, r24
 b44:	4a f0       	brmi	.+18     	; 0xb58 <__mulsf3_pse+0x7a>
 b46:	ee 0f       	add	r30, r30
 b48:	ff 1f       	adc	r31, r31
 b4a:	bb 1f       	adc	r27, r27
 b4c:	66 1f       	adc	r22, r22
 b4e:	77 1f       	adc	r23, r23
 b50:	88 1f       	adc	r24, r24
 b52:	91 50       	subi	r25, 0x01	; 1
 b54:	50 40       	sbci	r21, 0x00	; 0
 b56:	a9 f7       	brne	.-22     	; 0xb42 <__mulsf3_pse+0x64>
 b58:	9e 3f       	cpi	r25, 0xFE	; 254
 b5a:	51 05       	cpc	r21, r1
 b5c:	80 f0       	brcs	.+32     	; 0xb7e <__mulsf3_pse+0xa0>
 b5e:	0c 94 03 05 	jmp	0xa06	; 0xa06 <__fp_inf>
 b62:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__fp_szero>
 b66:	5f 3f       	cpi	r21, 0xFF	; 255
 b68:	e4 f3       	brlt	.-8      	; 0xb62 <__mulsf3_pse+0x84>
 b6a:	98 3e       	cpi	r25, 0xE8	; 232
 b6c:	d4 f3       	brlt	.-12     	; 0xb62 <__mulsf3_pse+0x84>
 b6e:	86 95       	lsr	r24
 b70:	77 95       	ror	r23
 b72:	67 95       	ror	r22
 b74:	b7 95       	ror	r27
 b76:	f7 95       	ror	r31
 b78:	e7 95       	ror	r30
 b7a:	9f 5f       	subi	r25, 0xFF	; 255
 b7c:	c1 f7       	brne	.-16     	; 0xb6e <__mulsf3_pse+0x90>
 b7e:	fe 2b       	or	r31, r30
 b80:	88 0f       	add	r24, r24
 b82:	91 1d       	adc	r25, r1
 b84:	96 95       	lsr	r25
 b86:	87 95       	ror	r24
 b88:	97 f9       	bld	r25, 7
 b8a:	08 95       	ret

00000b8c <__fp_cmp>:
 b8c:	99 0f       	add	r25, r25
 b8e:	00 08       	sbc	r0, r0
 b90:	55 0f       	add	r21, r21
 b92:	aa 0b       	sbc	r26, r26
 b94:	e0 e8       	ldi	r30, 0x80	; 128
 b96:	fe ef       	ldi	r31, 0xFE	; 254
 b98:	16 16       	cp	r1, r22
 b9a:	17 06       	cpc	r1, r23
 b9c:	e8 07       	cpc	r30, r24
 b9e:	f9 07       	cpc	r31, r25
 ba0:	c0 f0       	brcs	.+48     	; 0xbd2 <__fp_cmp+0x46>
 ba2:	12 16       	cp	r1, r18
 ba4:	13 06       	cpc	r1, r19
 ba6:	e4 07       	cpc	r30, r20
 ba8:	f5 07       	cpc	r31, r21
 baa:	98 f0       	brcs	.+38     	; 0xbd2 <__fp_cmp+0x46>
 bac:	62 1b       	sub	r22, r18
 bae:	73 0b       	sbc	r23, r19
 bb0:	84 0b       	sbc	r24, r20
 bb2:	95 0b       	sbc	r25, r21
 bb4:	39 f4       	brne	.+14     	; 0xbc4 <__fp_cmp+0x38>
 bb6:	0a 26       	eor	r0, r26
 bb8:	61 f0       	breq	.+24     	; 0xbd2 <__fp_cmp+0x46>
 bba:	23 2b       	or	r18, r19
 bbc:	24 2b       	or	r18, r20
 bbe:	25 2b       	or	r18, r21
 bc0:	21 f4       	brne	.+8      	; 0xbca <__fp_cmp+0x3e>
 bc2:	08 95       	ret
 bc4:	0a 26       	eor	r0, r26
 bc6:	09 f4       	brne	.+2      	; 0xbca <__fp_cmp+0x3e>
 bc8:	a1 40       	sbci	r26, 0x01	; 1
 bca:	a6 95       	lsr	r26
 bcc:	8f ef       	ldi	r24, 0xFF	; 255
 bce:	81 1d       	adc	r24, r1
 bd0:	81 1d       	adc	r24, r1
 bd2:	08 95       	ret

00000bd4 <__umulhisi3>:
 bd4:	a2 9f       	mul	r26, r18
 bd6:	b0 01       	movw	r22, r0
 bd8:	b3 9f       	mul	r27, r19
 bda:	c0 01       	movw	r24, r0
 bdc:	a3 9f       	mul	r26, r19
 bde:	70 0d       	add	r23, r0
 be0:	81 1d       	adc	r24, r1
 be2:	11 24       	eor	r1, r1
 be4:	91 1d       	adc	r25, r1
 be6:	b2 9f       	mul	r27, r18
 be8:	70 0d       	add	r23, r0
 bea:	81 1d       	adc	r24, r1
 bec:	11 24       	eor	r1, r1
 bee:	91 1d       	adc	r25, r1
 bf0:	08 95       	ret

00000bf2 <_exit>:
 bf2:	f8 94       	cli

00000bf4 <__stop_program>:
 bf4:	ff cf       	rjmp	.-2      	; 0xbf4 <__stop_program>
