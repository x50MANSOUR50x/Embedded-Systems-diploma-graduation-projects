
ATmega32 driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000013fc  00001490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800070  00800070  000014a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000014d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  0000150c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024fc  00000000  00000000  000016dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b35  00000000  00000000  00003bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000112e  00000000  00000000  0000470d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c0  00000000  00000000  0000583c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000711  00000000  00000000  00005bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000019e6  00000000  00000000  0000630d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00007cf3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__vector_1>
       8:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <__vector_2>
       c:	0c 94 65 05 	jmp	0xaca	; 0xaca <__vector_3>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	99 00       	.word	0x0099	; ????
      56:	ad 00       	.word	0x00ad	; ????
      58:	c1 00       	.word	0x00c1	; ????
      5a:	d5 00       	.word	0x00d5	; ????
      5c:	e9 00       	.word	0x00e9	; ????
      5e:	fd 00       	.word	0x00fd	; ????
      60:	11 01       	movw	r2, r2
      62:	25 01       	movw	r4, r10
      64:	39 01       	movw	r6, r18
      66:	4d 01       	movw	r8, r26
      68:	6e 01       	movw	r12, r28
      6a:	82 01       	movw	r16, r4
      6c:	96 01       	movw	r18, r12
      6e:	aa 01       	movw	r20, r20
      70:	be 01       	movw	r22, r28
      72:	d2 01       	movw	r26, r4
      74:	e6 01       	movw	r28, r12
      76:	fa 01       	movw	r30, r20
      78:	0e 02       	muls	r16, r30
      7a:	22 02       	muls	r18, r18

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf e5       	ldi	r28, 0x5F	; 95
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	10 e0       	ldi	r17, 0x00	; 0
      8a:	a0 e6       	ldi	r26, 0x60	; 96
      8c:	b0 e0       	ldi	r27, 0x00	; 0
      8e:	ec ef       	ldi	r30, 0xFC	; 252
      90:	f3 e1       	ldi	r31, 0x13	; 19
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a0 37       	cpi	r26, 0x70	; 112
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	a0 e7       	ldi	r26, 0x70	; 112
      a2:	b0 e0       	ldi	r27, 0x00	; 0
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a4 38       	cpi	r26, 0x84	; 132
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 e5 05 	call	0xbca	; 0xbca <main>
      b2:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <BCD_to_SEVEN_SEG_Init>:
}

void SEVEN_SEG_Blink(unsigned char port)  
{
	    #if defined CC
		DIO_WritePort(port,0x08);
      ba:	cf 93       	push	r28
      bc:	c8 2f       	mov	r28, r24
      be:	61 11       	cpse	r22, r1
      c0:	13 c0       	rjmp	.+38     	; 0xe8 <BCD_to_SEVEN_SEG_Init+0x2e>
      c2:	41 e0       	ldi	r20, 0x01	; 1
      c4:	0e 94 8f 02 	call	0x51e	; 0x51e <DIO_SetPinDir>
      c8:	41 e0       	ldi	r20, 0x01	; 1
      ca:	61 e0       	ldi	r22, 0x01	; 1
      cc:	8c 2f       	mov	r24, r28
      ce:	0e 94 8f 02 	call	0x51e	; 0x51e <DIO_SetPinDir>
      d2:	41 e0       	ldi	r20, 0x01	; 1
      d4:	62 e0       	ldi	r22, 0x02	; 2
      d6:	8c 2f       	mov	r24, r28
      d8:	0e 94 8f 02 	call	0x51e	; 0x51e <DIO_SetPinDir>
      dc:	41 e0       	ldi	r20, 0x01	; 1
      de:	63 e0       	ldi	r22, 0x03	; 3
      e0:	8c 2f       	mov	r24, r28
      e2:	0e 94 8f 02 	call	0x51e	; 0x51e <DIO_SetPinDir>
      e6:	15 c0       	rjmp	.+42     	; 0x112 <BCD_to_SEVEN_SEG_Init+0x58>
      e8:	61 30       	cpi	r22, 0x01	; 1
      ea:	99 f4       	brne	.+38     	; 0x112 <BCD_to_SEVEN_SEG_Init+0x58>
      ec:	41 e0       	ldi	r20, 0x01	; 1
      ee:	64 e0       	ldi	r22, 0x04	; 4
      f0:	0e 94 8f 02 	call	0x51e	; 0x51e <DIO_SetPinDir>
      f4:	41 e0       	ldi	r20, 0x01	; 1
      f6:	65 e0       	ldi	r22, 0x05	; 5
      f8:	8c 2f       	mov	r24, r28
      fa:	0e 94 8f 02 	call	0x51e	; 0x51e <DIO_SetPinDir>
      fe:	41 e0       	ldi	r20, 0x01	; 1
     100:	66 e0       	ldi	r22, 0x06	; 6
     102:	8c 2f       	mov	r24, r28
     104:	0e 94 8f 02 	call	0x51e	; 0x51e <DIO_SetPinDir>
     108:	41 e0       	ldi	r20, 0x01	; 1
     10a:	67 e0       	ldi	r22, 0x07	; 7
     10c:	8c 2f       	mov	r24, r28
     10e:	0e 94 8f 02 	call	0x51e	; 0x51e <DIO_SetPinDir>
     112:	cf 91       	pop	r28
     114:	08 95       	ret

00000116 <BCD_to_SEVEN_SEG_Write>:
		DIO_WritePort(port,~0x08);
		#endif
}

void BCD_to_SEVEN_SEG_Write(unsigned char port, unsigned char half, unsigned char value)
{
     116:	cf 93       	push	r28
     118:	c8 2f       	mov	r28, r24
	if(half == 0)
     11a:	61 11       	cpse	r22, r1
     11c:	d2 c0       	rjmp	.+420    	; 0x2c2 <BCD_to_SEVEN_SEG_Write+0x1ac>
	{
		switch (value)
     11e:	50 e0       	ldi	r21, 0x00	; 0
     120:	4a 30       	cpi	r20, 0x0A	; 10
     122:	51 05       	cpc	r21, r1
     124:	08 f0       	brcs	.+2      	; 0x128 <BCD_to_SEVEN_SEG_Write+0x12>
     126:	a1 c1       	rjmp	.+834    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
     128:	fa 01       	movw	r30, r20
     12a:	e6 5d       	subi	r30, 0xD6	; 214
     12c:	ff 4f       	sbci	r31, 0xFF	; 255
     12e:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <__tablejump2__>
		{
		case 0:
			DIO_WritePin(port, pin0, 0);
     132:	40 e0       	ldi	r20, 0x00	; 0
     134:	60 e0       	ldi	r22, 0x00	; 0
     136:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			DIO_WritePin(port, pin1, 0);
     13a:	40 e0       	ldi	r20, 0x00	; 0
     13c:	61 e0       	ldi	r22, 0x01	; 1
     13e:	8c 2f       	mov	r24, r28
     140:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			DIO_WritePin(port, pin2, 0);
     144:	40 e0       	ldi	r20, 0x00	; 0
     146:	62 e0       	ldi	r22, 0x02	; 2
     148:	8c 2f       	mov	r24, r28
     14a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			DIO_WritePin(port, pin3, 0);
     14e:	40 e0       	ldi	r20, 0x00	; 0
     150:	63 e0       	ldi	r22, 0x03	; 3
     152:	8c 2f       	mov	r24, r28
     154:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			break;
     158:	88 c1       	rjmp	.+784    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
		case 1:
			DIO_WritePin(port, pin0, 1);
     15a:	41 e0       	ldi	r20, 0x01	; 1
     15c:	60 e0       	ldi	r22, 0x00	; 0
     15e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			DIO_WritePin(port, pin1, 0);
     162:	40 e0       	ldi	r20, 0x00	; 0
     164:	61 e0       	ldi	r22, 0x01	; 1
     166:	8c 2f       	mov	r24, r28
     168:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			DIO_WritePin(port, pin2, 0);
     16c:	40 e0       	ldi	r20, 0x00	; 0
     16e:	62 e0       	ldi	r22, 0x02	; 2
     170:	8c 2f       	mov	r24, r28
     172:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			DIO_WritePin(port, pin3, 0);
     176:	40 e0       	ldi	r20, 0x00	; 0
     178:	63 e0       	ldi	r22, 0x03	; 3
     17a:	8c 2f       	mov	r24, r28
     17c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			break;
     180:	74 c1       	rjmp	.+744    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
		case 2:
			DIO_WritePin(port, pin0, 0);
     182:	40 e0       	ldi	r20, 0x00	; 0
     184:	60 e0       	ldi	r22, 0x00	; 0
     186:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			DIO_WritePin(port, pin1, 1);
     18a:	41 e0       	ldi	r20, 0x01	; 1
     18c:	61 e0       	ldi	r22, 0x01	; 1
     18e:	8c 2f       	mov	r24, r28
     190:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			DIO_WritePin(port, pin2, 0);
     194:	40 e0       	ldi	r20, 0x00	; 0
     196:	62 e0       	ldi	r22, 0x02	; 2
     198:	8c 2f       	mov	r24, r28
     19a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			DIO_WritePin(port, pin3, 0);
     19e:	40 e0       	ldi	r20, 0x00	; 0
     1a0:	63 e0       	ldi	r22, 0x03	; 3
     1a2:	8c 2f       	mov	r24, r28
     1a4:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			break;
     1a8:	60 c1       	rjmp	.+704    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
		case 3:
			DIO_WritePin(port, pin0, 1);
     1aa:	41 e0       	ldi	r20, 0x01	; 1
     1ac:	60 e0       	ldi	r22, 0x00	; 0
     1ae:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			DIO_WritePin(port, pin1, 1);
     1b2:	41 e0       	ldi	r20, 0x01	; 1
     1b4:	61 e0       	ldi	r22, 0x01	; 1
     1b6:	8c 2f       	mov	r24, r28
     1b8:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			DIO_WritePin(port, pin2, 0);
     1bc:	40 e0       	ldi	r20, 0x00	; 0
     1be:	62 e0       	ldi	r22, 0x02	; 2
     1c0:	8c 2f       	mov	r24, r28
     1c2:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			DIO_WritePin(port, pin3, 0);
     1c6:	40 e0       	ldi	r20, 0x00	; 0
     1c8:	63 e0       	ldi	r22, 0x03	; 3
     1ca:	8c 2f       	mov	r24, r28
     1cc:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			break;
     1d0:	4c c1       	rjmp	.+664    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
		case 4:
			DIO_WritePin(port, pin0, 0);
     1d2:	40 e0       	ldi	r20, 0x00	; 0
     1d4:	60 e0       	ldi	r22, 0x00	; 0
     1d6:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			DIO_WritePin(port, pin1, 0);
     1da:	40 e0       	ldi	r20, 0x00	; 0
     1dc:	61 e0       	ldi	r22, 0x01	; 1
     1de:	8c 2f       	mov	r24, r28
     1e0:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			DIO_WritePin(port, pin2, 1);
     1e4:	41 e0       	ldi	r20, 0x01	; 1
     1e6:	62 e0       	ldi	r22, 0x02	; 2
     1e8:	8c 2f       	mov	r24, r28
     1ea:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			DIO_WritePin(port, pin3, 0);
     1ee:	40 e0       	ldi	r20, 0x00	; 0
     1f0:	63 e0       	ldi	r22, 0x03	; 3
     1f2:	8c 2f       	mov	r24, r28
     1f4:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			break;
     1f8:	38 c1       	rjmp	.+624    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
		case 5:
			DIO_WritePin(port, pin0, 1);
     1fa:	41 e0       	ldi	r20, 0x01	; 1
     1fc:	60 e0       	ldi	r22, 0x00	; 0
     1fe:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			DIO_WritePin(port, pin1, 0);
     202:	40 e0       	ldi	r20, 0x00	; 0
     204:	61 e0       	ldi	r22, 0x01	; 1
     206:	8c 2f       	mov	r24, r28
     208:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			DIO_WritePin(port, pin2, 1);
     20c:	41 e0       	ldi	r20, 0x01	; 1
     20e:	62 e0       	ldi	r22, 0x02	; 2
     210:	8c 2f       	mov	r24, r28
     212:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			DIO_WritePin(port, pin3, 0);
     216:	40 e0       	ldi	r20, 0x00	; 0
     218:	63 e0       	ldi	r22, 0x03	; 3
     21a:	8c 2f       	mov	r24, r28
     21c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			break;
     220:	24 c1       	rjmp	.+584    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
		case 6:
			DIO_WritePin(port, pin0, 0);
     222:	40 e0       	ldi	r20, 0x00	; 0
     224:	60 e0       	ldi	r22, 0x00	; 0
     226:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			DIO_WritePin(port, pin1, 1);
     22a:	41 e0       	ldi	r20, 0x01	; 1
     22c:	61 e0       	ldi	r22, 0x01	; 1
     22e:	8c 2f       	mov	r24, r28
     230:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			DIO_WritePin(port, pin2, 1);
     234:	41 e0       	ldi	r20, 0x01	; 1
     236:	62 e0       	ldi	r22, 0x02	; 2
     238:	8c 2f       	mov	r24, r28
     23a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			DIO_WritePin(port, pin3, 0);
     23e:	40 e0       	ldi	r20, 0x00	; 0
     240:	63 e0       	ldi	r22, 0x03	; 3
     242:	8c 2f       	mov	r24, r28
     244:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			break;
     248:	10 c1       	rjmp	.+544    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
		case 7:
			DIO_WritePin(port, pin0, 1);
     24a:	41 e0       	ldi	r20, 0x01	; 1
     24c:	60 e0       	ldi	r22, 0x00	; 0
     24e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			DIO_WritePin(port, pin1, 1);
     252:	41 e0       	ldi	r20, 0x01	; 1
     254:	61 e0       	ldi	r22, 0x01	; 1
     256:	8c 2f       	mov	r24, r28
     258:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			DIO_WritePin(port, pin2, 1);
     25c:	41 e0       	ldi	r20, 0x01	; 1
     25e:	62 e0       	ldi	r22, 0x02	; 2
     260:	8c 2f       	mov	r24, r28
     262:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			DIO_WritePin(port, pin3, 0);
     266:	40 e0       	ldi	r20, 0x00	; 0
     268:	63 e0       	ldi	r22, 0x03	; 3
     26a:	8c 2f       	mov	r24, r28
     26c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			break;
     270:	fc c0       	rjmp	.+504    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
		case 8:
			DIO_WritePin(port, pin0, 0);
     272:	40 e0       	ldi	r20, 0x00	; 0
     274:	60 e0       	ldi	r22, 0x00	; 0
     276:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			DIO_WritePin(port, pin1, 0);
     27a:	40 e0       	ldi	r20, 0x00	; 0
     27c:	61 e0       	ldi	r22, 0x01	; 1
     27e:	8c 2f       	mov	r24, r28
     280:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			DIO_WritePin(port, pin2, 0);
     284:	40 e0       	ldi	r20, 0x00	; 0
     286:	62 e0       	ldi	r22, 0x02	; 2
     288:	8c 2f       	mov	r24, r28
     28a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			DIO_WritePin(port, pin3, 1);
     28e:	41 e0       	ldi	r20, 0x01	; 1
     290:	63 e0       	ldi	r22, 0x03	; 3
     292:	8c 2f       	mov	r24, r28
     294:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			break;
     298:	e8 c0       	rjmp	.+464    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
		case 9:
			DIO_WritePin(port, pin0, 1);
     29a:	41 e0       	ldi	r20, 0x01	; 1
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			DIO_WritePin(port, pin1, 0);
     2a2:	40 e0       	ldi	r20, 0x00	; 0
     2a4:	61 e0       	ldi	r22, 0x01	; 1
     2a6:	8c 2f       	mov	r24, r28
     2a8:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			DIO_WritePin(port, pin2, 0);
     2ac:	40 e0       	ldi	r20, 0x00	; 0
     2ae:	62 e0       	ldi	r22, 0x02	; 2
     2b0:	8c 2f       	mov	r24, r28
     2b2:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			DIO_WritePin(port, pin3, 1);
     2b6:	41 e0       	ldi	r20, 0x01	; 1
     2b8:	63 e0       	ldi	r22, 0x03	; 3
     2ba:	8c 2f       	mov	r24, r28
     2bc:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
			break;
     2c0:	d4 c0       	rjmp	.+424    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
		default:
			break;
		}
	}
	else if(half == 1)
     2c2:	61 30       	cpi	r22, 0x01	; 1
     2c4:	09 f0       	breq	.+2      	; 0x2c8 <BCD_to_SEVEN_SEG_Write+0x1b2>
     2c6:	d1 c0       	rjmp	.+418    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
	{
		switch (value)
     2c8:	50 e0       	ldi	r21, 0x00	; 0
     2ca:	4a 30       	cpi	r20, 0x0A	; 10
     2cc:	51 05       	cpc	r21, r1
     2ce:	08 f0       	brcs	.+2      	; 0x2d2 <BCD_to_SEVEN_SEG_Write+0x1bc>
     2d0:	cc c0       	rjmp	.+408    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
     2d2:	fa 01       	movw	r30, r20
     2d4:	ec 5c       	subi	r30, 0xCC	; 204
     2d6:	ff 4f       	sbci	r31, 0xFF	; 255
     2d8:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <__tablejump2__>
			{
			case 0:
				DIO_WritePin(port, pin4, 0);
     2dc:	40 e0       	ldi	r20, 0x00	; 0
     2de:	64 e0       	ldi	r22, 0x04	; 4
     2e0:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				DIO_WritePin(port, pin5, 0);
     2e4:	40 e0       	ldi	r20, 0x00	; 0
     2e6:	65 e0       	ldi	r22, 0x05	; 5
     2e8:	8c 2f       	mov	r24, r28
     2ea:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				DIO_WritePin(port, pin6, 0);
     2ee:	40 e0       	ldi	r20, 0x00	; 0
     2f0:	66 e0       	ldi	r22, 0x06	; 6
     2f2:	8c 2f       	mov	r24, r28
     2f4:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				DIO_WritePin(port, pin7, 0);
     2f8:	40 e0       	ldi	r20, 0x00	; 0
     2fa:	67 e0       	ldi	r22, 0x07	; 7
     2fc:	8c 2f       	mov	r24, r28
     2fe:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				break;
     302:	b3 c0       	rjmp	.+358    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
			case 1:
				DIO_WritePin(port, pin4, 1);
     304:	41 e0       	ldi	r20, 0x01	; 1
     306:	64 e0       	ldi	r22, 0x04	; 4
     308:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				DIO_WritePin(port, pin5, 0);
     30c:	40 e0       	ldi	r20, 0x00	; 0
     30e:	65 e0       	ldi	r22, 0x05	; 5
     310:	8c 2f       	mov	r24, r28
     312:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				DIO_WritePin(port, pin6, 0);
     316:	40 e0       	ldi	r20, 0x00	; 0
     318:	66 e0       	ldi	r22, 0x06	; 6
     31a:	8c 2f       	mov	r24, r28
     31c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				DIO_WritePin(port, pin7, 0);
     320:	40 e0       	ldi	r20, 0x00	; 0
     322:	67 e0       	ldi	r22, 0x07	; 7
     324:	8c 2f       	mov	r24, r28
     326:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				break;
     32a:	9f c0       	rjmp	.+318    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
			case 2:
				DIO_WritePin(port, pin4, 0);
     32c:	40 e0       	ldi	r20, 0x00	; 0
     32e:	64 e0       	ldi	r22, 0x04	; 4
     330:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				DIO_WritePin(port, pin5, 1);
     334:	41 e0       	ldi	r20, 0x01	; 1
     336:	65 e0       	ldi	r22, 0x05	; 5
     338:	8c 2f       	mov	r24, r28
     33a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				DIO_WritePin(port, pin6, 0);
     33e:	40 e0       	ldi	r20, 0x00	; 0
     340:	66 e0       	ldi	r22, 0x06	; 6
     342:	8c 2f       	mov	r24, r28
     344:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				DIO_WritePin(port, pin7, 0);
     348:	40 e0       	ldi	r20, 0x00	; 0
     34a:	67 e0       	ldi	r22, 0x07	; 7
     34c:	8c 2f       	mov	r24, r28
     34e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				break;
     352:	8b c0       	rjmp	.+278    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
			case 3:
				DIO_WritePin(port, pin4, 1);
     354:	41 e0       	ldi	r20, 0x01	; 1
     356:	64 e0       	ldi	r22, 0x04	; 4
     358:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				DIO_WritePin(port, pin5, 1);
     35c:	41 e0       	ldi	r20, 0x01	; 1
     35e:	65 e0       	ldi	r22, 0x05	; 5
     360:	8c 2f       	mov	r24, r28
     362:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				DIO_WritePin(port, pin6, 0);
     366:	40 e0       	ldi	r20, 0x00	; 0
     368:	66 e0       	ldi	r22, 0x06	; 6
     36a:	8c 2f       	mov	r24, r28
     36c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				DIO_WritePin(port, pin7, 0);
     370:	40 e0       	ldi	r20, 0x00	; 0
     372:	67 e0       	ldi	r22, 0x07	; 7
     374:	8c 2f       	mov	r24, r28
     376:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				break;
     37a:	77 c0       	rjmp	.+238    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
			case 4:
				DIO_WritePin(port, pin4, 0);
     37c:	40 e0       	ldi	r20, 0x00	; 0
     37e:	64 e0       	ldi	r22, 0x04	; 4
     380:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				DIO_WritePin(port, pin5, 0);
     384:	40 e0       	ldi	r20, 0x00	; 0
     386:	65 e0       	ldi	r22, 0x05	; 5
     388:	8c 2f       	mov	r24, r28
     38a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				DIO_WritePin(port, pin6, 1);
     38e:	41 e0       	ldi	r20, 0x01	; 1
     390:	66 e0       	ldi	r22, 0x06	; 6
     392:	8c 2f       	mov	r24, r28
     394:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				DIO_WritePin(port, pin7, 0);
     398:	40 e0       	ldi	r20, 0x00	; 0
     39a:	67 e0       	ldi	r22, 0x07	; 7
     39c:	8c 2f       	mov	r24, r28
     39e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				break;
     3a2:	63 c0       	rjmp	.+198    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
			case 5:
				DIO_WritePin(port, pin4, 1);
     3a4:	41 e0       	ldi	r20, 0x01	; 1
     3a6:	64 e0       	ldi	r22, 0x04	; 4
     3a8:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				DIO_WritePin(port, pin5, 0);
     3ac:	40 e0       	ldi	r20, 0x00	; 0
     3ae:	65 e0       	ldi	r22, 0x05	; 5
     3b0:	8c 2f       	mov	r24, r28
     3b2:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				DIO_WritePin(port, pin6, 1);
     3b6:	41 e0       	ldi	r20, 0x01	; 1
     3b8:	66 e0       	ldi	r22, 0x06	; 6
     3ba:	8c 2f       	mov	r24, r28
     3bc:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				DIO_WritePin(port, pin7, 0);
     3c0:	40 e0       	ldi	r20, 0x00	; 0
     3c2:	67 e0       	ldi	r22, 0x07	; 7
     3c4:	8c 2f       	mov	r24, r28
     3c6:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				break;
     3ca:	4f c0       	rjmp	.+158    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
			case 6:
				DIO_WritePin(port, pin4, 0);
     3cc:	40 e0       	ldi	r20, 0x00	; 0
     3ce:	64 e0       	ldi	r22, 0x04	; 4
     3d0:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				DIO_WritePin(port, pin5, 1);
     3d4:	41 e0       	ldi	r20, 0x01	; 1
     3d6:	65 e0       	ldi	r22, 0x05	; 5
     3d8:	8c 2f       	mov	r24, r28
     3da:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				DIO_WritePin(port, pin6, 1);
     3de:	41 e0       	ldi	r20, 0x01	; 1
     3e0:	66 e0       	ldi	r22, 0x06	; 6
     3e2:	8c 2f       	mov	r24, r28
     3e4:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				DIO_WritePin(port, pin7, 0);
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	67 e0       	ldi	r22, 0x07	; 7
     3ec:	8c 2f       	mov	r24, r28
     3ee:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				break;
     3f2:	3b c0       	rjmp	.+118    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
			case 7:
				DIO_WritePin(port, pin4, 1);
     3f4:	41 e0       	ldi	r20, 0x01	; 1
     3f6:	64 e0       	ldi	r22, 0x04	; 4
     3f8:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				DIO_WritePin(port, pin5, 1);
     3fc:	41 e0       	ldi	r20, 0x01	; 1
     3fe:	65 e0       	ldi	r22, 0x05	; 5
     400:	8c 2f       	mov	r24, r28
     402:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				DIO_WritePin(port, pin6, 1);
     406:	41 e0       	ldi	r20, 0x01	; 1
     408:	66 e0       	ldi	r22, 0x06	; 6
     40a:	8c 2f       	mov	r24, r28
     40c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				DIO_WritePin(port, pin7, 0);
     410:	40 e0       	ldi	r20, 0x00	; 0
     412:	67 e0       	ldi	r22, 0x07	; 7
     414:	8c 2f       	mov	r24, r28
     416:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				break;
     41a:	27 c0       	rjmp	.+78     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
			case 8:
				DIO_WritePin(port, pin4, 0);
     41c:	40 e0       	ldi	r20, 0x00	; 0
     41e:	64 e0       	ldi	r22, 0x04	; 4
     420:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				DIO_WritePin(port, pin5, 0);
     424:	40 e0       	ldi	r20, 0x00	; 0
     426:	65 e0       	ldi	r22, 0x05	; 5
     428:	8c 2f       	mov	r24, r28
     42a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				DIO_WritePin(port, pin6, 0);
     42e:	40 e0       	ldi	r20, 0x00	; 0
     430:	66 e0       	ldi	r22, 0x06	; 6
     432:	8c 2f       	mov	r24, r28
     434:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				DIO_WritePin(port, pin7, 1);
     438:	41 e0       	ldi	r20, 0x01	; 1
     43a:	67 e0       	ldi	r22, 0x07	; 7
     43c:	8c 2f       	mov	r24, r28
     43e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				break;
     442:	13 c0       	rjmp	.+38     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
			case 9:
				DIO_WritePin(port, pin4, 1);
     444:	41 e0       	ldi	r20, 0x01	; 1
     446:	64 e0       	ldi	r22, 0x04	; 4
     448:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				DIO_WritePin(port, pin5, 0);
     44c:	40 e0       	ldi	r20, 0x00	; 0
     44e:	65 e0       	ldi	r22, 0x05	; 5
     450:	8c 2f       	mov	r24, r28
     452:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				DIO_WritePin(port, pin6, 0);
     456:	40 e0       	ldi	r20, 0x00	; 0
     458:	66 e0       	ldi	r22, 0x06	; 6
     45a:	8c 2f       	mov	r24, r28
     45c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				DIO_WritePin(port, pin7, 1);
     460:	41 e0       	ldi	r20, 0x01	; 1
     462:	67 e0       	ldi	r22, 0x07	; 7
     464:	8c 2f       	mov	r24, r28
     466:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
				break;
			default:
				break;
			}
	}
     46a:	cf 91       	pop	r28
     46c:	08 95       	ret

0000046e <ADC_Init>:
#include "ADC_interface.h"
#include "Definitions.h"
void  ADC_Init(unsigned char pin)
{
	 /*ADC_INIT*/
	Bit_Set(ADMUX,REFS0); //AVCC with external capacitor at AREF pin
     46e:	97 b1       	in	r25, 0x07	; 7
     470:	90 64       	ori	r25, 0x40	; 64
     472:	97 b9       	out	0x07, r25	; 7
	/* configure channel */
	if(pin == 0) // channel 0
     474:	88 23       	and	r24, r24
     476:	b1 f1       	breq	.+108    	; 0x4e4 <ADC_Init+0x76>
	 {
		 
	 }
	 else if(pin == 1)  // channel 1
     478:	81 30       	cpi	r24, 0x01	; 1
     47a:	21 f4       	brne	.+8      	; 0x484 <ADC_Init+0x16>
	 {
		 Bit_Set(ADMUX,MUX0); 
     47c:	87 b1       	in	r24, 0x07	; 7
     47e:	81 60       	ori	r24, 0x01	; 1
     480:	87 b9       	out	0x07, r24	; 7
     482:	30 c0       	rjmp	.+96     	; 0x4e4 <ADC_Init+0x76>
	 }
	 else if(pin == 2)  // channel 2
     484:	82 30       	cpi	r24, 0x02	; 2
     486:	21 f4       	brne	.+8      	; 0x490 <ADC_Init+0x22>
	 {
		 Bit_Set(ADMUX,MUX1); 
     488:	87 b1       	in	r24, 0x07	; 7
     48a:	82 60       	ori	r24, 0x02	; 2
     48c:	87 b9       	out	0x07, r24	; 7
     48e:	2a c0       	rjmp	.+84     	; 0x4e4 <ADC_Init+0x76>
	 }
	 else if(pin == 3)  // channel 3
     490:	83 30       	cpi	r24, 0x03	; 3
     492:	39 f4       	brne	.+14     	; 0x4a2 <ADC_Init+0x34>
	 {
		 Bit_Set(ADMUX,MUX0); 
     494:	87 b1       	in	r24, 0x07	; 7
     496:	81 60       	ori	r24, 0x01	; 1
     498:	87 b9       	out	0x07, r24	; 7
		 Bit_Set(ADMUX,MUX1); 
     49a:	87 b1       	in	r24, 0x07	; 7
     49c:	82 60       	ori	r24, 0x02	; 2
     49e:	87 b9       	out	0x07, r24	; 7
     4a0:	21 c0       	rjmp	.+66     	; 0x4e4 <ADC_Init+0x76>
	 }
	 else if(pin == 4)  // channel 4
     4a2:	84 30       	cpi	r24, 0x04	; 4
     4a4:	21 f4       	brne	.+8      	; 0x4ae <ADC_Init+0x40>
	 {
		 Bit_Set(ADMUX,MUX2); 
     4a6:	87 b1       	in	r24, 0x07	; 7
     4a8:	84 60       	ori	r24, 0x04	; 4
     4aa:	87 b9       	out	0x07, r24	; 7
     4ac:	1b c0       	rjmp	.+54     	; 0x4e4 <ADC_Init+0x76>
	 }
	 else if(pin == 5)  // channel 5
     4ae:	85 30       	cpi	r24, 0x05	; 5
     4b0:	39 f4       	brne	.+14     	; 0x4c0 <ADC_Init+0x52>
	 {
		 Bit_Set(ADMUX,MUX0); 
     4b2:	87 b1       	in	r24, 0x07	; 7
     4b4:	81 60       	ori	r24, 0x01	; 1
     4b6:	87 b9       	out	0x07, r24	; 7
		 Bit_Set(ADMUX,MUX2); 
     4b8:	87 b1       	in	r24, 0x07	; 7
     4ba:	84 60       	ori	r24, 0x04	; 4
     4bc:	87 b9       	out	0x07, r24	; 7
     4be:	12 c0       	rjmp	.+36     	; 0x4e4 <ADC_Init+0x76>
	 }
	 else if(pin == 6)  // channel 6
     4c0:	86 30       	cpi	r24, 0x06	; 6
     4c2:	39 f4       	brne	.+14     	; 0x4d2 <ADC_Init+0x64>
	 {
		 Bit_Set(ADMUX,MUX1);
     4c4:	87 b1       	in	r24, 0x07	; 7
     4c6:	82 60       	ori	r24, 0x02	; 2
     4c8:	87 b9       	out	0x07, r24	; 7
         Bit_Set(ADMUX,MUX2); 		 
     4ca:	87 b1       	in	r24, 0x07	; 7
     4cc:	84 60       	ori	r24, 0x04	; 4
     4ce:	87 b9       	out	0x07, r24	; 7
     4d0:	09 c0       	rjmp	.+18     	; 0x4e4 <ADC_Init+0x76>
	 } 
	 else   // channel 7
	 {
		  Bit_Set(ADMUX,MUX0); 
     4d2:	87 b1       	in	r24, 0x07	; 7
     4d4:	81 60       	ori	r24, 0x01	; 1
     4d6:	87 b9       	out	0x07, r24	; 7
		  Bit_Set(ADMUX,MUX1); 
     4d8:	87 b1       	in	r24, 0x07	; 7
     4da:	82 60       	ori	r24, 0x02	; 2
     4dc:	87 b9       	out	0x07, r24	; 7
		  Bit_Set(ADMUX,MUX2); 
     4de:	87 b1       	in	r24, 0x07	; 7
     4e0:	84 60       	ori	r24, 0x04	; 4
     4e2:	87 b9       	out	0x07, r24	; 7
	 }
	Bit_Set(ADCSRA,ADEN); //Enable ADC
     4e4:	86 b1       	in	r24, 0x06	; 6
     4e6:	80 68       	ori	r24, 0x80	; 128
     4e8:	86 b9       	out	0x06, r24	; 6
	/*SET clock of ADC,ADPS0 default zero*/
	Bit_Set(ADCSRA,ADPS2);
     4ea:	86 b1       	in	r24, 0x06	; 6
     4ec:	84 60       	ori	r24, 0x04	; 4
     4ee:	86 b9       	out	0x06, r24	; 6
	Bit_Set(ADCSRA,ADPS1);
     4f0:	86 b1       	in	r24, 0x06	; 6
     4f2:	82 60       	ori	r24, 0x02	; 2
     4f4:	86 b9       	out	0x06, r24	; 6
     4f6:	08 95       	ret

000004f8 <ADC_Read>:
	/*ADC_END_INIT*/
}
unsigned short ADC_Read(unsigned char pin)
{
	pin &= 0x07; /* Input channel number must be from 0 --> 7 */
     4f8:	87 70       	andi	r24, 0x07	; 7
	ADMUX &= 0xE0; /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
     4fa:	97 b1       	in	r25, 0x07	; 7
     4fc:	90 7e       	andi	r25, 0xE0	; 224
     4fe:	97 b9       	out	0x07, r25	; 7
	ADMUX = ADMUX | pin; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
     500:	97 b1       	in	r25, 0x07	; 7
     502:	89 2b       	or	r24, r25
     504:	87 b9       	out	0x07, r24	; 7
	unsigned short read_value;
	Bit_Set(ADCSRA,ADSC); //start conversion ADC
     506:	86 b1       	in	r24, 0x06	; 6
     508:	80 64       	ori	r24, 0x40	; 64
     50a:	86 b9       	out	0x06, r24	; 6
	while(Bit_Read(ADCSRA,ADSC)==1);
     50c:	36 99       	sbic	0x06, 6	; 6
     50e:	fe cf       	rjmp	.-4      	; 0x50c <ADC_Read+0x14>
	//while(Bit_Read(ADCSRA,ADIF)==0);
	//Bit_Set(ADCSRA,ADIF); //clear flag of ADC
	read_value=ADCL;
     510:	24 b1       	in	r18, 0x04	; 4
	read_value|=(ADCH<<8);
     512:	85 b1       	in	r24, 0x05	; 5
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	98 2f       	mov	r25, r24
     518:	88 27       	eor	r24, r24
	return read_value;
     51a:	82 2b       	or	r24, r18
     51c:	08 95       	ret

0000051e <DIO_SetPinDir>:
		case portd:
		value=((PIND&(1<<pin))>>pin);
		break;
	}
return value;
}
     51e:	82 34       	cpi	r24, 0x42	; 66
     520:	19 f1       	breq	.+70     	; 0x568 <DIO_SetPinDir+0x4a>
     522:	18 f4       	brcc	.+6      	; 0x52a <DIO_SetPinDir+0xc>
     524:	81 34       	cpi	r24, 0x41	; 65
     526:	39 f0       	breq	.+14     	; 0x536 <DIO_SetPinDir+0x18>
     528:	08 95       	ret
     52a:	83 34       	cpi	r24, 0x43	; 67
     52c:	b1 f1       	breq	.+108    	; 0x59a <DIO_SetPinDir+0x7c>
     52e:	84 34       	cpi	r24, 0x44	; 68
     530:	09 f4       	brne	.+2      	; 0x534 <DIO_SetPinDir+0x16>
     532:	4c c0       	rjmp	.+152    	; 0x5cc <DIO_SetPinDir+0xae>
     534:	08 95       	ret
     536:	41 30       	cpi	r20, 0x01	; 1
     538:	59 f4       	brne	.+22     	; 0x550 <DIO_SetPinDir+0x32>
     53a:	2a b3       	in	r18, 0x1a	; 26
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	02 c0       	rjmp	.+4      	; 0x546 <DIO_SetPinDir+0x28>
     542:	88 0f       	add	r24, r24
     544:	99 1f       	adc	r25, r25
     546:	6a 95       	dec	r22
     548:	e2 f7       	brpl	.-8      	; 0x542 <DIO_SetPinDir+0x24>
     54a:	82 2b       	or	r24, r18
     54c:	8a bb       	out	0x1a, r24	; 26
     54e:	08 95       	ret
     550:	2a b3       	in	r18, 0x1a	; 26
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	02 c0       	rjmp	.+4      	; 0x55c <DIO_SetPinDir+0x3e>
     558:	88 0f       	add	r24, r24
     55a:	99 1f       	adc	r25, r25
     55c:	6a 95       	dec	r22
     55e:	e2 f7       	brpl	.-8      	; 0x558 <DIO_SetPinDir+0x3a>
     560:	80 95       	com	r24
     562:	82 23       	and	r24, r18
     564:	8a bb       	out	0x1a, r24	; 26
     566:	08 95       	ret
     568:	41 30       	cpi	r20, 0x01	; 1
     56a:	59 f4       	brne	.+22     	; 0x582 <DIO_SetPinDir+0x64>
     56c:	27 b3       	in	r18, 0x17	; 23
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	02 c0       	rjmp	.+4      	; 0x578 <DIO_SetPinDir+0x5a>
     574:	88 0f       	add	r24, r24
     576:	99 1f       	adc	r25, r25
     578:	6a 95       	dec	r22
     57a:	e2 f7       	brpl	.-8      	; 0x574 <DIO_SetPinDir+0x56>
     57c:	82 2b       	or	r24, r18
     57e:	87 bb       	out	0x17, r24	; 23
     580:	08 95       	ret
     582:	27 b3       	in	r18, 0x17	; 23
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	02 c0       	rjmp	.+4      	; 0x58e <DIO_SetPinDir+0x70>
     58a:	88 0f       	add	r24, r24
     58c:	99 1f       	adc	r25, r25
     58e:	6a 95       	dec	r22
     590:	e2 f7       	brpl	.-8      	; 0x58a <DIO_SetPinDir+0x6c>
     592:	80 95       	com	r24
     594:	82 23       	and	r24, r18
     596:	87 bb       	out	0x17, r24	; 23
     598:	08 95       	ret
     59a:	41 30       	cpi	r20, 0x01	; 1
     59c:	59 f4       	brne	.+22     	; 0x5b4 <DIO_SetPinDir+0x96>
     59e:	24 b3       	in	r18, 0x14	; 20
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	02 c0       	rjmp	.+4      	; 0x5aa <DIO_SetPinDir+0x8c>
     5a6:	88 0f       	add	r24, r24
     5a8:	99 1f       	adc	r25, r25
     5aa:	6a 95       	dec	r22
     5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <DIO_SetPinDir+0x88>
     5ae:	82 2b       	or	r24, r18
     5b0:	84 bb       	out	0x14, r24	; 20
     5b2:	08 95       	ret
     5b4:	24 b3       	in	r18, 0x14	; 20
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	02 c0       	rjmp	.+4      	; 0x5c0 <DIO_SetPinDir+0xa2>
     5bc:	88 0f       	add	r24, r24
     5be:	99 1f       	adc	r25, r25
     5c0:	6a 95       	dec	r22
     5c2:	e2 f7       	brpl	.-8      	; 0x5bc <DIO_SetPinDir+0x9e>
     5c4:	80 95       	com	r24
     5c6:	82 23       	and	r24, r18
     5c8:	84 bb       	out	0x14, r24	; 20
     5ca:	08 95       	ret
     5cc:	41 30       	cpi	r20, 0x01	; 1
     5ce:	59 f4       	brne	.+22     	; 0x5e6 <DIO_SetPinDir+0xc8>
     5d0:	21 b3       	in	r18, 0x11	; 17
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	02 c0       	rjmp	.+4      	; 0x5dc <DIO_SetPinDir+0xbe>
     5d8:	88 0f       	add	r24, r24
     5da:	99 1f       	adc	r25, r25
     5dc:	6a 95       	dec	r22
     5de:	e2 f7       	brpl	.-8      	; 0x5d8 <DIO_SetPinDir+0xba>
     5e0:	82 2b       	or	r24, r18
     5e2:	81 bb       	out	0x11, r24	; 17
     5e4:	08 95       	ret
     5e6:	21 b3       	in	r18, 0x11	; 17
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <DIO_SetPinDir+0xd4>
     5ee:	88 0f       	add	r24, r24
     5f0:	99 1f       	adc	r25, r25
     5f2:	6a 95       	dec	r22
     5f4:	e2 f7       	brpl	.-8      	; 0x5ee <DIO_SetPinDir+0xd0>
     5f6:	80 95       	com	r24
     5f8:	82 23       	and	r24, r18
     5fa:	81 bb       	out	0x11, r24	; 17
     5fc:	08 95       	ret

000005fe <DIO_WritePin>:
     5fe:	82 34       	cpi	r24, 0x42	; 66
     600:	19 f1       	breq	.+70     	; 0x648 <DIO_WritePin+0x4a>
     602:	18 f4       	brcc	.+6      	; 0x60a <DIO_WritePin+0xc>
     604:	81 34       	cpi	r24, 0x41	; 65
     606:	39 f0       	breq	.+14     	; 0x616 <DIO_WritePin+0x18>
     608:	08 95       	ret
     60a:	83 34       	cpi	r24, 0x43	; 67
     60c:	b1 f1       	breq	.+108    	; 0x67a <DIO_WritePin+0x7c>
     60e:	84 34       	cpi	r24, 0x44	; 68
     610:	09 f4       	brne	.+2      	; 0x614 <DIO_WritePin+0x16>
     612:	4c c0       	rjmp	.+152    	; 0x6ac <DIO_WritePin+0xae>
     614:	08 95       	ret
     616:	41 30       	cpi	r20, 0x01	; 1
     618:	59 f4       	brne	.+22     	; 0x630 <DIO_WritePin+0x32>
     61a:	2b b3       	in	r18, 0x1b	; 27
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	02 c0       	rjmp	.+4      	; 0x626 <DIO_WritePin+0x28>
     622:	88 0f       	add	r24, r24
     624:	99 1f       	adc	r25, r25
     626:	6a 95       	dec	r22
     628:	e2 f7       	brpl	.-8      	; 0x622 <DIO_WritePin+0x24>
     62a:	82 2b       	or	r24, r18
     62c:	8b bb       	out	0x1b, r24	; 27
     62e:	08 95       	ret
     630:	2b b3       	in	r18, 0x1b	; 27
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	02 c0       	rjmp	.+4      	; 0x63c <DIO_WritePin+0x3e>
     638:	88 0f       	add	r24, r24
     63a:	99 1f       	adc	r25, r25
     63c:	6a 95       	dec	r22
     63e:	e2 f7       	brpl	.-8      	; 0x638 <DIO_WritePin+0x3a>
     640:	80 95       	com	r24
     642:	82 23       	and	r24, r18
     644:	8b bb       	out	0x1b, r24	; 27
     646:	08 95       	ret
     648:	41 30       	cpi	r20, 0x01	; 1
     64a:	59 f4       	brne	.+22     	; 0x662 <DIO_WritePin+0x64>
     64c:	28 b3       	in	r18, 0x18	; 24
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	02 c0       	rjmp	.+4      	; 0x658 <DIO_WritePin+0x5a>
     654:	88 0f       	add	r24, r24
     656:	99 1f       	adc	r25, r25
     658:	6a 95       	dec	r22
     65a:	e2 f7       	brpl	.-8      	; 0x654 <DIO_WritePin+0x56>
     65c:	82 2b       	or	r24, r18
     65e:	88 bb       	out	0x18, r24	; 24
     660:	08 95       	ret
     662:	28 b3       	in	r18, 0x18	; 24
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	02 c0       	rjmp	.+4      	; 0x66e <DIO_WritePin+0x70>
     66a:	88 0f       	add	r24, r24
     66c:	99 1f       	adc	r25, r25
     66e:	6a 95       	dec	r22
     670:	e2 f7       	brpl	.-8      	; 0x66a <DIO_WritePin+0x6c>
     672:	80 95       	com	r24
     674:	82 23       	and	r24, r18
     676:	88 bb       	out	0x18, r24	; 24
     678:	08 95       	ret
     67a:	41 30       	cpi	r20, 0x01	; 1
     67c:	59 f4       	brne	.+22     	; 0x694 <DIO_WritePin+0x96>
     67e:	25 b3       	in	r18, 0x15	; 21
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	02 c0       	rjmp	.+4      	; 0x68a <DIO_WritePin+0x8c>
     686:	88 0f       	add	r24, r24
     688:	99 1f       	adc	r25, r25
     68a:	6a 95       	dec	r22
     68c:	e2 f7       	brpl	.-8      	; 0x686 <DIO_WritePin+0x88>
     68e:	82 2b       	or	r24, r18
     690:	85 bb       	out	0x15, r24	; 21
     692:	08 95       	ret
     694:	25 b3       	in	r18, 0x15	; 21
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	02 c0       	rjmp	.+4      	; 0x6a0 <DIO_WritePin+0xa2>
     69c:	88 0f       	add	r24, r24
     69e:	99 1f       	adc	r25, r25
     6a0:	6a 95       	dec	r22
     6a2:	e2 f7       	brpl	.-8      	; 0x69c <DIO_WritePin+0x9e>
     6a4:	80 95       	com	r24
     6a6:	82 23       	and	r24, r18
     6a8:	85 bb       	out	0x15, r24	; 21
     6aa:	08 95       	ret
     6ac:	41 30       	cpi	r20, 0x01	; 1
     6ae:	59 f4       	brne	.+22     	; 0x6c6 <DIO_WritePin+0xc8>
     6b0:	22 b3       	in	r18, 0x12	; 18
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	02 c0       	rjmp	.+4      	; 0x6bc <DIO_WritePin+0xbe>
     6b8:	88 0f       	add	r24, r24
     6ba:	99 1f       	adc	r25, r25
     6bc:	6a 95       	dec	r22
     6be:	e2 f7       	brpl	.-8      	; 0x6b8 <DIO_WritePin+0xba>
     6c0:	82 2b       	or	r24, r18
     6c2:	82 bb       	out	0x12, r24	; 18
     6c4:	08 95       	ret
     6c6:	22 b3       	in	r18, 0x12	; 18
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <DIO_WritePin+0xd4>
     6ce:	88 0f       	add	r24, r24
     6d0:	99 1f       	adc	r25, r25
     6d2:	6a 95       	dec	r22
     6d4:	e2 f7       	brpl	.-8      	; 0x6ce <DIO_WritePin+0xd0>
     6d6:	80 95       	com	r24
     6d8:	82 23       	and	r24, r18
     6da:	82 bb       	out	0x12, r24	; 18
     6dc:	08 95       	ret

000006de <DIO_SetPortDir>:

void DIO_SetPortDir (uint8_t port,uint8_t dir)
{
	switch(port)
     6de:	82 34       	cpi	r24, 0x42	; 66
     6e0:	59 f0       	breq	.+22     	; 0x6f8 <DIO_SetPortDir+0x1a>
     6e2:	18 f4       	brcc	.+6      	; 0x6ea <DIO_SetPortDir+0xc>
     6e4:	81 34       	cpi	r24, 0x41	; 65
     6e6:	31 f0       	breq	.+12     	; 0x6f4 <DIO_SetPortDir+0x16>
     6e8:	08 95       	ret
     6ea:	83 34       	cpi	r24, 0x43	; 67
     6ec:	39 f0       	breq	.+14     	; 0x6fc <DIO_SetPortDir+0x1e>
     6ee:	84 34       	cpi	r24, 0x44	; 68
     6f0:	39 f0       	breq	.+14     	; 0x700 <DIO_SetPortDir+0x22>
     6f2:	08 95       	ret
	{
		//portA
		case porta:
		DDRA=dir;
     6f4:	6a bb       	out	0x1a, r22	; 26
		break;
     6f6:	08 95       	ret
		//portB
		case portb:
		DDRB=dir;
     6f8:	67 bb       	out	0x17, r22	; 23
		break;
     6fa:	08 95       	ret
		//portC
		case portc:
		DDRC=dir;
     6fc:	64 bb       	out	0x14, r22	; 20
		break;
     6fe:	08 95       	ret
		//portD
		case portd:
		DDRD=dir;
     700:	61 bb       	out	0x11, r22	; 17
     702:	08 95       	ret

00000704 <DIO_WritePort>:
		break;
	}
}
void DIO_WritePort (uint8_t port,uint8_t val)
{
	switch(port)
     704:	82 34       	cpi	r24, 0x42	; 66
     706:	59 f0       	breq	.+22     	; 0x71e <DIO_WritePort+0x1a>
     708:	18 f4       	brcc	.+6      	; 0x710 <DIO_WritePort+0xc>
     70a:	81 34       	cpi	r24, 0x41	; 65
     70c:	31 f0       	breq	.+12     	; 0x71a <DIO_WritePort+0x16>
     70e:	08 95       	ret
     710:	83 34       	cpi	r24, 0x43	; 67
     712:	39 f0       	breq	.+14     	; 0x722 <DIO_WritePort+0x1e>
     714:	84 34       	cpi	r24, 0x44	; 68
     716:	39 f0       	breq	.+14     	; 0x726 <DIO_WritePort+0x22>
     718:	08 95       	ret
	{

		//portA
		case porta:
		PORTA=val;
     71a:	6b bb       	out	0x1b, r22	; 27
		break;
     71c:	08 95       	ret
		//portB
		case portb:
		PORTB=val;
     71e:	68 bb       	out	0x18, r22	; 24
		break;
     720:	08 95       	ret
		//portC
		case portc:
		PORTC=val;
     722:	65 bb       	out	0x15, r22	; 21
		break;
     724:	08 95       	ret
		//portD
		case portd:
		PORTD=val;
     726:	62 bb       	out	0x12, r22	; 18
     728:	08 95       	ret

0000072a <EXTI_vEnable>:
#include "EXTI_interface.h"


void EXTI_vEnable(unsigned char EXTI_PIN)
{
	switch(EXTI_PIN)
     72a:	81 30       	cpi	r24, 0x01	; 1
     72c:	41 f0       	breq	.+16     	; 0x73e <EXTI_vEnable+0x14>
     72e:	18 f0       	brcs	.+6      	; 0x736 <EXTI_vEnable+0xc>
     730:	82 30       	cpi	r24, 0x02	; 2
     732:	49 f0       	breq	.+18     	; 0x746 <EXTI_vEnable+0x1c>
     734:	08 95       	ret
	{
		case 0:
		Bit_Set(GICR,INT0);
     736:	8b b7       	in	r24, 0x3b	; 59
     738:	80 64       	ori	r24, 0x40	; 64
     73a:	8b bf       	out	0x3b, r24	; 59
		break;
     73c:	08 95       	ret
		case 1:
		Bit_Set(GICR,INT1);
     73e:	8b b7       	in	r24, 0x3b	; 59
     740:	80 68       	ori	r24, 0x80	; 128
     742:	8b bf       	out	0x3b, r24	; 59
		break;
     744:	08 95       	ret
		case 2:
		Bit_Set(GICR,INT2);
     746:	8b b7       	in	r24, 0x3b	; 59
     748:	80 62       	ori	r24, 0x20	; 32
     74a:	8b bf       	out	0x3b, r24	; 59
     74c:	08 95       	ret

0000074e <EXTI_vActiveMode>:
// RISING   0     	

void EXTI_vActiveMode(unsigned char EXTI_PIN,unsigned char EXTI_MODE)
{ 

	switch (EXTI_PIN)
     74e:	81 30       	cpi	r24, 0x01	; 1
     750:	49 f1       	breq	.+82     	; 0x7a4 <EXTI_vActiveMode+0x56>
     752:	20 f0       	brcs	.+8      	; 0x75c <EXTI_vActiveMode+0xe>
     754:	82 30       	cpi	r24, 0x02	; 2
     756:	09 f4       	brne	.+2      	; 0x75a <EXTI_vActiveMode+0xc>
     758:	48 c0       	rjmp	.+144    	; 0x7ea <EXTI_vActiveMode+0x9c>
     75a:	08 95       	ret
	{
	case EXTI0:
		switch (EXTI_MODE)
     75c:	61 30       	cpi	r22, 0x01	; 1
     75e:	c1 f0       	breq	.+48     	; 0x790 <EXTI_vActiveMode+0x42>
     760:	68 f0       	brcs	.+26     	; 0x77c <EXTI_vActiveMode+0x2e>
     762:	63 30       	cpi	r22, 0x03	; 3
     764:	09 f0       	breq	.+2      	; 0x768 <EXTI_vActiveMode+0x1a>
     766:	53 c0       	rjmp	.+166    	; 0x80e <__DATA_REGION_LENGTH__+0xe>
				Bit_Set(SREG, GIE);
				Bit_Clear(MCUCR, ISC00);
				Bit_Clear(MCUCR, ISC01);
				break;*/
			case CHANGE:
				Bit_Set(SREG, GIE);
     768:	8f b7       	in	r24, 0x3f	; 63
     76a:	80 68       	ori	r24, 0x80	; 128
     76c:	8f bf       	out	0x3f, r24	; 63
				Bit_Set(MCUCR, ISC00);
     76e:	85 b7       	in	r24, 0x35	; 53
     770:	81 60       	ori	r24, 0x01	; 1
     772:	85 bf       	out	0x35, r24	; 53
				Bit_Clear(MCUCR, ISC01);
     774:	85 b7       	in	r24, 0x35	; 53
     776:	8d 7f       	andi	r24, 0xFD	; 253
     778:	85 bf       	out	0x35, r24	; 53
				break;
     77a:	08 95       	ret
			case FALLING:
				Bit_Set(SREG, GIE);
     77c:	8f b7       	in	r24, 0x3f	; 63
     77e:	80 68       	ori	r24, 0x80	; 128
     780:	8f bf       	out	0x3f, r24	; 63
				Bit_Clear(MCUCR, ISC00);
     782:	85 b7       	in	r24, 0x35	; 53
     784:	8e 7f       	andi	r24, 0xFE	; 254
     786:	85 bf       	out	0x35, r24	; 53
				Bit_Set(MCUCR, ISC01);
     788:	85 b7       	in	r24, 0x35	; 53
     78a:	82 60       	ori	r24, 0x02	; 2
     78c:	85 bf       	out	0x35, r24	; 53
				break;
     78e:	08 95       	ret
			case RISING:
				Bit_Set(SREG, GIE);
     790:	8f b7       	in	r24, 0x3f	; 63
     792:	80 68       	ori	r24, 0x80	; 128
     794:	8f bf       	out	0x3f, r24	; 63
				Bit_Set(MCUCR, ISC00);
     796:	85 b7       	in	r24, 0x35	; 53
     798:	81 60       	ori	r24, 0x01	; 1
     79a:	85 bf       	out	0x35, r24	; 53
				Bit_Set(MCUCR, ISC01);
     79c:	85 b7       	in	r24, 0x35	; 53
     79e:	82 60       	ori	r24, 0x02	; 2
     7a0:	85 bf       	out	0x35, r24	; 53
				break;
     7a2:	08 95       	ret
			default:
				break;
		}
		break;
	case EXTI1:
		switch (EXTI_MODE)
     7a4:	61 30       	cpi	r22, 0x01	; 1
     7a6:	b9 f0       	breq	.+46     	; 0x7d6 <EXTI_vActiveMode+0x88>
     7a8:	60 f0       	brcs	.+24     	; 0x7c2 <EXTI_vActiveMode+0x74>
     7aa:	63 30       	cpi	r22, 0x03	; 3
     7ac:	81 f5       	brne	.+96     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
				Bit_Set(SREG, GIE);
				Bit_Clear(MCUCR, ISC10);
				Bit_Clear(MCUCR, ISC11);
				break;*/
			case CHANGE:
				Bit_Set(SREG, GIE);
     7ae:	8f b7       	in	r24, 0x3f	; 63
     7b0:	80 68       	ori	r24, 0x80	; 128
     7b2:	8f bf       	out	0x3f, r24	; 63
				Bit_Set(MCUCR, ISC10);
     7b4:	85 b7       	in	r24, 0x35	; 53
     7b6:	84 60       	ori	r24, 0x04	; 4
     7b8:	85 bf       	out	0x35, r24	; 53
				Bit_Clear(MCUCR, ISC11);
     7ba:	85 b7       	in	r24, 0x35	; 53
     7bc:	87 7f       	andi	r24, 0xF7	; 247
     7be:	85 bf       	out	0x35, r24	; 53
				break;
     7c0:	08 95       	ret
			case FALLING:
				Bit_Set(SREG, GIE);
     7c2:	8f b7       	in	r24, 0x3f	; 63
     7c4:	80 68       	ori	r24, 0x80	; 128
     7c6:	8f bf       	out	0x3f, r24	; 63
				Bit_Clear(MCUCR, ISC10);
     7c8:	85 b7       	in	r24, 0x35	; 53
     7ca:	8b 7f       	andi	r24, 0xFB	; 251
     7cc:	85 bf       	out	0x35, r24	; 53
				Bit_Set(MCUCR, ISC11);
     7ce:	85 b7       	in	r24, 0x35	; 53
     7d0:	88 60       	ori	r24, 0x08	; 8
     7d2:	85 bf       	out	0x35, r24	; 53
				break;
     7d4:	08 95       	ret
			case RISING:
				Bit_Set(SREG, GIE);
     7d6:	8f b7       	in	r24, 0x3f	; 63
     7d8:	80 68       	ori	r24, 0x80	; 128
     7da:	8f bf       	out	0x3f, r24	; 63
				Bit_Set(MCUCR, ISC10);
     7dc:	85 b7       	in	r24, 0x35	; 53
     7de:	84 60       	ori	r24, 0x04	; 4
     7e0:	85 bf       	out	0x35, r24	; 53
				Bit_Set(MCUCR, ISC11);
     7e2:	85 b7       	in	r24, 0x35	; 53
     7e4:	88 60       	ori	r24, 0x08	; 8
     7e6:	85 bf       	out	0x35, r24	; 53
				break;
     7e8:	08 95       	ret
			default:
				break;
		}
		break;
	case EXTI2:
		switch (EXTI_MODE)
     7ea:	66 23       	and	r22, r22
     7ec:	19 f0       	breq	.+6      	; 0x7f4 <EXTI_vActiveMode+0xa6>
     7ee:	61 30       	cpi	r22, 0x01	; 1
     7f0:	41 f0       	breq	.+16     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     7f2:	08 95       	ret
		{
			case FALLING:
				Bit_Set(SREG, GIE);
     7f4:	8f b7       	in	r24, 0x3f	; 63
     7f6:	80 68       	ori	r24, 0x80	; 128
     7f8:	8f bf       	out	0x3f, r24	; 63
				Bit_Set(MCUCSR, ISC2);
     7fa:	84 b7       	in	r24, 0x34	; 52
     7fc:	80 64       	ori	r24, 0x40	; 64
     7fe:	84 bf       	out	0x34, r24	; 52
				break;
     800:	08 95       	ret
			case RISING:
				Bit_Set(SREG, GIE);
     802:	8f b7       	in	r24, 0x3f	; 63
     804:	80 68       	ori	r24, 0x80	; 128
     806:	8f bf       	out	0x3f, r24	; 63
				Bit_Clear(MCUCSR, ISC2);
     808:	84 b7       	in	r24, 0x34	; 52
     80a:	8f 7b       	andi	r24, 0xBF	; 191
     80c:	84 bf       	out	0x34, r24	; 52
     80e:	08 95       	ret

00000810 <LCD_Enable>:

#include "LCD_interface.h"

void LCD_Enable(void)
{
	DIO_WritePin(EN_PORT,EN,1);
     810:	41 e0       	ldi	r20, 0x01	; 1
     812:	60 e0       	ldi	r22, 0x00	; 0
     814:	84 e4       	ldi	r24, 0x44	; 68
     816:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     81a:	8f e9       	ldi	r24, 0x9F	; 159
     81c:	9f e0       	ldi	r25, 0x0F	; 15
     81e:	01 97       	sbiw	r24, 0x01	; 1
     820:	f1 f7       	brne	.-4      	; 0x81e <LCD_Enable+0xe>
     822:	00 c0       	rjmp	.+0      	; 0x824 <LCD_Enable+0x14>
     824:	00 00       	nop
	_delay_ms(2);
	DIO_WritePin(EN_PORT,EN,0);
     826:	40 e0       	ldi	r20, 0x00	; 0
     828:	60 e0       	ldi	r22, 0x00	; 0
     82a:	84 e4       	ldi	r24, 0x44	; 68
     82c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
     830:	8f e9       	ldi	r24, 0x9F	; 159
     832:	9f e0       	ldi	r25, 0x0F	; 15
     834:	01 97       	sbiw	r24, 0x01	; 1
     836:	f1 f7       	brne	.-4      	; 0x834 <LCD_Enable+0x24>
     838:	00 c0       	rjmp	.+0      	; 0x83a <LCD_Enable+0x2a>
     83a:	00 00       	nop
     83c:	08 95       	ret

0000083e <LCD_SendCommand>:
	_delay_ms(2);
}
void LCD_SendCommand(unsigned char cmd)
{
	#if defined eight_bit_mode
	DIO_WritePort(LCD_PORT,cmd);
     83e:	68 2f       	mov	r22, r24
     840:	83 e4       	ldi	r24, 0x43	; 67
     842:	0e 94 82 03 	call	0x704	; 0x704 <DIO_WritePort>
	DIO_WritePin(RS_PORT,RS,0);
     846:	40 e0       	ldi	r20, 0x00	; 0
     848:	61 e0       	ldi	r22, 0x01	; 1
     84a:	81 e4       	ldi	r24, 0x41	; 65
     84c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
	LCD_Enable();
     850:	0e 94 08 04 	call	0x810	; 0x810 <LCD_Enable>
     854:	8f ec       	ldi	r24, 0xCF	; 207
     856:	97 e0       	ldi	r25, 0x07	; 7
     858:	01 97       	sbiw	r24, 0x01	; 1
     85a:	f1 f7       	brne	.-4      	; 0x858 <LCD_SendCommand+0x1a>
     85c:	00 c0       	rjmp	.+0      	; 0x85e <LCD_SendCommand+0x20>
     85e:	00 00       	nop
     860:	08 95       	ret

00000862 <LCD_Init>:
     862:	2f ef       	ldi	r18, 0xFF	; 255
     864:	81 ee       	ldi	r24, 0xE1	; 225
     866:	94 e0       	ldi	r25, 0x04	; 4
     868:	21 50       	subi	r18, 0x01	; 1
     86a:	80 40       	sbci	r24, 0x00	; 0
     86c:	90 40       	sbci	r25, 0x00	; 0
     86e:	e1 f7       	brne	.-8      	; 0x868 <LCD_Init+0x6>
     870:	00 c0       	rjmp	.+0      	; 0x872 <LCD_Init+0x10>
     872:	00 00       	nop
}
void LCD_Init(void)
{
	#if defined eight_bit_mode
	_delay_ms(200);
	DIO_SetPortDir(LCD_PORT,1);
     874:	61 e0       	ldi	r22, 0x01	; 1
     876:	83 e4       	ldi	r24, 0x43	; 67
     878:	0e 94 6f 03 	call	0x6de	; 0x6de <DIO_SetPortDir>
	DIO_SetPinDir(EN_PORT,EN,1);
     87c:	41 e0       	ldi	r20, 0x01	; 1
     87e:	60 e0       	ldi	r22, 0x00	; 0
     880:	84 e4       	ldi	r24, 0x44	; 68
     882:	0e 94 8f 02 	call	0x51e	; 0x51e <DIO_SetPinDir>
	DIO_SetPinDir(RS_PORT,RS,1);
     886:	41 e0       	ldi	r20, 0x01	; 1
     888:	61 e0       	ldi	r22, 0x01	; 1
     88a:	81 e4       	ldi	r24, 0x41	; 65
     88c:	0e 94 8f 02 	call	0x51e	; 0x51e <DIO_SetPinDir>
	DIO_SetPinDir(RW_PORT,RW,1);
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	61 e0       	ldi	r22, 0x01	; 1
     894:	84 e4       	ldi	r24, 0x44	; 68
     896:	0e 94 8f 02 	call	0x51e	; 0x51e <DIO_SetPinDir>
	DIO_WritePin(RW_PORT,RW,0);
     89a:	40 e0       	ldi	r20, 0x00	; 0
     89c:	61 e0       	ldi	r22, 0x01	; 1
     89e:	84 e4       	ldi	r24, 0x44	; 68
     8a0:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
	LCD_SendCommand(EIGHT_BIT);
     8a4:	88 e3       	ldi	r24, 0x38	; 56
     8a6:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_SendCommand>
     8aa:	8f ec       	ldi	r24, 0xCF	; 207
     8ac:	97 e0       	ldi	r25, 0x07	; 7
     8ae:	01 97       	sbiw	r24, 0x01	; 1
     8b0:	f1 f7       	brne	.-4      	; 0x8ae <LCD_Init+0x4c>
     8b2:	00 c0       	rjmp	.+0      	; 0x8b4 <LCD_Init+0x52>
     8b4:	00 00       	nop
	_delay_ms(1);
	LCD_SendCommand(CURSOR_ON_DISPLAY_ON);
     8b6:	8e e0       	ldi	r24, 0x0E	; 14
     8b8:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_SendCommand>
     8bc:	8f ec       	ldi	r24, 0xCF	; 207
     8be:	97 e0       	ldi	r25, 0x07	; 7
     8c0:	01 97       	sbiw	r24, 0x01	; 1
     8c2:	f1 f7       	brne	.-4      	; 0x8c0 <LCD_Init+0x5e>
     8c4:	00 c0       	rjmp	.+0      	; 0x8c6 <LCD_Init+0x64>
     8c6:	00 00       	nop
	_delay_ms(1);
	LCD_SendCommand(CLR_SCREEN);
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_SendCommand>
     8ce:	8f e1       	ldi	r24, 0x1F	; 31
     8d0:	9e e4       	ldi	r25, 0x4E	; 78
     8d2:	01 97       	sbiw	r24, 0x01	; 1
     8d4:	f1 f7       	brne	.-4      	; 0x8d2 <LCD_Init+0x70>
     8d6:	00 c0       	rjmp	.+0      	; 0x8d8 <LCD_Init+0x76>
     8d8:	00 00       	nop
	_delay_ms(10);
	LCD_SendCommand(ENTRY_MODE);
     8da:	86 e0       	ldi	r24, 0x06	; 6
     8dc:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_SendCommand>
     8e0:	8f ec       	ldi	r24, 0xCF	; 207
     8e2:	97 e0       	ldi	r25, 0x07	; 7
     8e4:	01 97       	sbiw	r24, 0x01	; 1
     8e6:	f1 f7       	brne	.-4      	; 0x8e4 <LCD_Init+0x82>
     8e8:	00 c0       	rjmp	.+0      	; 0x8ea <LCD_Init+0x88>
     8ea:	00 00       	nop
     8ec:	08 95       	ret

000008ee <LCD_SendChar>:

}
void LCD_SendChar(unsigned char data)
{
	#if defined eight_bit_mode
	DIO_WritePort(LCD_PORT,data);
     8ee:	68 2f       	mov	r22, r24
     8f0:	83 e4       	ldi	r24, 0x43	; 67
     8f2:	0e 94 82 03 	call	0x704	; 0x704 <DIO_WritePort>
	DIO_WritePin(RS_PORT,RS,1);
     8f6:	41 e0       	ldi	r20, 0x01	; 1
     8f8:	61 e0       	ldi	r22, 0x01	; 1
     8fa:	81 e4       	ldi	r24, 0x41	; 65
     8fc:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
	LCD_Enable();
     900:	0e 94 08 04 	call	0x810	; 0x810 <LCD_Enable>
     904:	08 95       	ret

00000906 <LCD_SendNumber>:
	DIO_WritePin(LCD_PORT,3,((data&(1<<3))>>3));
	LCD_Enable();
	#endif
}
void LCD_SendNumber(unsigned int num)
{
     906:	1f 93       	push	r17
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	cd b7       	in	r28, 0x3d	; 61
     90e:	de b7       	in	r29, 0x3e	; 62
     910:	2a 97       	sbiw	r28, 0x0a	; 10
     912:	0f b6       	in	r0, 0x3f	; 63
     914:	f8 94       	cli
     916:	de bf       	out	0x3e, r29	; 62
     918:	0f be       	out	0x3f, r0	; 63
     91a:	cd bf       	out	0x3d, r28	; 61
     91c:	fc 01       	movw	r30, r24
	unsigned char data;
	unsigned int number;
	unsigned char arr[NUMBER_DIGITS];
	signed char i=0;
	signed int count=0;
	if (num!=0)
     91e:	89 2b       	or	r24, r25
     920:	99 f5       	brne	.+102    	; 0x988 <LCD_SendNumber+0x82>
     922:	4a c0       	rjmp	.+148    	; 0x9b8 <LCD_SendNumber+0xb2>
	{
		while(num!=0)
		{
			number=num%10;
     924:	9f 01       	movw	r18, r30
     926:	ad ec       	ldi	r26, 0xCD	; 205
     928:	bc ec       	ldi	r27, 0xCC	; 204
     92a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__umulhisi3>
     92e:	96 95       	lsr	r25
     930:	87 95       	ror	r24
     932:	96 95       	lsr	r25
     934:	87 95       	ror	r24
     936:	96 95       	lsr	r25
     938:	87 95       	ror	r24
     93a:	9c 01       	movw	r18, r24
     93c:	22 0f       	add	r18, r18
     93e:	33 1f       	adc	r19, r19
     940:	88 0f       	add	r24, r24
     942:	99 1f       	adc	r25, r25
     944:	88 0f       	add	r24, r24
     946:	99 1f       	adc	r25, r25
     948:	88 0f       	add	r24, r24
     94a:	99 1f       	adc	r25, r25
     94c:	82 0f       	add	r24, r18
     94e:	93 1f       	adc	r25, r19
     950:	9f 01       	movw	r18, r30
     952:	28 1b       	sub	r18, r24
     954:	39 0b       	sbc	r19, r25
			arr[i]=number;
     956:	a1 e0       	ldi	r26, 0x01	; 1
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	ac 0f       	add	r26, r28
     95c:	bd 1f       	adc	r27, r29
     95e:	a1 0f       	add	r26, r17
     960:	b1 1d       	adc	r27, r1
     962:	17 fd       	sbrc	r17, 7
     964:	ba 95       	dec	r27
     966:	2c 93       	st	X, r18
			i++;
     968:	1f 5f       	subi	r17, 0xFF	; 255
			num=num/10;
     96a:	9f 01       	movw	r18, r30
     96c:	ad ec       	ldi	r26, 0xCD	; 205
     96e:	bc ec       	ldi	r27, 0xCC	; 204
     970:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__umulhisi3>
     974:	fc 01       	movw	r30, r24
     976:	f6 95       	lsr	r31
     978:	e7 95       	ror	r30
     97a:	f6 95       	lsr	r31
     97c:	e7 95       	ror	r30
     97e:	f6 95       	lsr	r31
     980:	e7 95       	ror	r30
			count++;
     982:	4f 5f       	subi	r20, 0xFF	; 255
     984:	5f 4f       	sbci	r21, 0xFF	; 255
     986:	03 c0       	rjmp	.+6      	; 0x98e <LCD_SendNumber+0x88>
     988:	40 e0       	ldi	r20, 0x00	; 0
     98a:	50 e0       	ldi	r21, 0x00	; 0
     98c:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char arr[NUMBER_DIGITS];
	signed char i=0;
	signed int count=0;
	if (num!=0)
	{
		while(num!=0)
     98e:	30 97       	sbiw	r30, 0x00	; 0
     990:	49 f6       	brne	.-110    	; 0x924 <LCD_SendNumber+0x1e>
			arr[i]=number;
			i++;
			num=num/10;
			count++;
		}
		for(i=(count-1);i>=0;i--)
     992:	1f ef       	ldi	r17, 0xFF	; 255
     994:	14 0f       	add	r17, r20
     996:	0d c0       	rjmp	.+26     	; 0x9b2 <LCD_SendNumber+0xac>
		{
			data =0x30+ arr[i];
     998:	e1 e0       	ldi	r30, 0x01	; 1
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	ec 0f       	add	r30, r28
     99e:	fd 1f       	adc	r31, r29
     9a0:	e1 0f       	add	r30, r17
     9a2:	f1 1d       	adc	r31, r1
     9a4:	17 fd       	sbrc	r17, 7
     9a6:	fa 95       	dec	r31
     9a8:	80 81       	ld	r24, Z
			LCD_SendChar(data);
     9aa:	80 5d       	subi	r24, 0xD0	; 208
     9ac:	0e 94 77 04 	call	0x8ee	; 0x8ee <LCD_SendChar>
			arr[i]=number;
			i++;
			num=num/10;
			count++;
		}
		for(i=(count-1);i>=0;i--)
     9b0:	11 50       	subi	r17, 0x01	; 1
     9b2:	11 23       	and	r17, r17
     9b4:	8c f7       	brge	.-30     	; 0x998 <LCD_SendNumber+0x92>
     9b6:	04 c0       	rjmp	.+8      	; 0x9c0 <LCD_SendNumber+0xba>
			LCD_SendChar(data);
		}
	}
	else
	{
		LCD_SendChar(num+48);
     9b8:	80 e3       	ldi	r24, 0x30	; 48
     9ba:	8e 0f       	add	r24, r30
     9bc:	0e 94 77 04 	call	0x8ee	; 0x8ee <LCD_SendChar>
	}

}
     9c0:	2a 96       	adiw	r28, 0x0a	; 10
     9c2:	0f b6       	in	r0, 0x3f	; 63
     9c4:	f8 94       	cli
     9c6:	de bf       	out	0x3e, r29	; 62
     9c8:	0f be       	out	0x3f, r0	; 63
     9ca:	cd bf       	out	0x3d, r28	; 61
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	1f 91       	pop	r17
     9d2:	08 95       	ret

000009d4 <LCD_SendString>:
	f_part=f_part*power(10,DIGITS);
	LCD_SendNumber(f_part);
}
*/
void LCD_SendString(char *str)
{
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	ec 01       	movw	r28, r24
	while((*str)!='\0')
     9da:	03 c0       	rjmp	.+6      	; 0x9e2 <LCD_SendString+0xe>
	{
		LCD_SendChar(*str);
     9dc:	0e 94 77 04 	call	0x8ee	; 0x8ee <LCD_SendChar>
		str++;
     9e0:	21 96       	adiw	r28, 0x01	; 1
	LCD_SendNumber(f_part);
}
*/
void LCD_SendString(char *str)
{
	while((*str)!='\0')
     9e2:	88 81       	ld	r24, Y
     9e4:	81 11       	cpse	r24, r1
     9e6:	fa cf       	rjmp	.-12     	; 0x9dc <LCD_SendString+0x8>
	{
		LCD_SendChar(*str);
		str++;
	}
}
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	08 95       	ret

000009ee <LCD_ClearScreen>:
void LCD_ClearScreen(void)
{
	LCD_SendCommand(CLR_SCREEN);
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_SendCommand>
     9f4:	8f e1       	ldi	r24, 0x1F	; 31
     9f6:	9e e4       	ldi	r25, 0x4E	; 78
     9f8:	01 97       	sbiw	r24, 0x01	; 1
     9fa:	f1 f7       	brne	.-4      	; 0x9f8 <LCD_ClearScreen+0xa>
     9fc:	00 c0       	rjmp	.+0      	; 0x9fe <LCD_ClearScreen+0x10>
     9fe:	00 00       	nop
     a00:	08 95       	ret

00000a02 <LCD_MoveCursor>:
	_delay_ms(10);
}
void LCD_MoveCursor(unsigned char row,unsigned char coloumn)
{
	char cmd=0x80;
	if(row>4||row<1||coloumn>16||coloumn<1)
     a02:	9f ef       	ldi	r25, 0xFF	; 255
     a04:	98 0f       	add	r25, r24
     a06:	94 30       	cpi	r25, 0x04	; 4
     a08:	c0 f4       	brcc	.+48     	; 0xa3a <LCD_MoveCursor+0x38>
     a0a:	61 31       	cpi	r22, 0x11	; 17
     a0c:	c0 f4       	brcc	.+48     	; 0xa3e <LCD_MoveCursor+0x3c>
     a0e:	66 23       	and	r22, r22
     a10:	c1 f0       	breq	.+48     	; 0xa42 <LCD_MoveCursor+0x40>
	{
		cmd=0x80;
	}
	else if(row==1)
     a12:	81 30       	cpi	r24, 0x01	; 1
     a14:	19 f4       	brne	.+6      	; 0xa1c <LCD_MoveCursor+0x1a>
	{
		cmd=0x80+coloumn-1;
     a16:	8f e7       	ldi	r24, 0x7F	; 127
     a18:	86 0f       	add	r24, r22
     a1a:	16 c0       	rjmp	.+44     	; 0xa48 <LCD_MoveCursor+0x46>
	}
	else if(row==2)
     a1c:	82 30       	cpi	r24, 0x02	; 2
     a1e:	19 f4       	brne	.+6      	; 0xa26 <LCD_MoveCursor+0x24>
	{
		cmd=0xc0+coloumn-1;
     a20:	8f eb       	ldi	r24, 0xBF	; 191
     a22:	86 0f       	add	r24, r22
     a24:	11 c0       	rjmp	.+34     	; 0xa48 <LCD_MoveCursor+0x46>
	}
	else if(row==3)
     a26:	83 30       	cpi	r24, 0x03	; 3
     a28:	19 f4       	brne	.+6      	; 0xa30 <LCD_MoveCursor+0x2e>
	{
		cmd=0x94+coloumn-1;
     a2a:	83 e9       	ldi	r24, 0x93	; 147
     a2c:	86 0f       	add	r24, r22
     a2e:	0c c0       	rjmp	.+24     	; 0xa48 <LCD_MoveCursor+0x46>
	}
	
	else if(row==4)
     a30:	84 30       	cpi	r24, 0x04	; 4
     a32:	49 f4       	brne	.+18     	; 0xa46 <LCD_MoveCursor+0x44>
	{
		cmd=0xD4+coloumn-1;
     a34:	83 ed       	ldi	r24, 0xD3	; 211
     a36:	86 0f       	add	r24, r22
     a38:	07 c0       	rjmp	.+14     	; 0xa48 <LCD_MoveCursor+0x46>
void LCD_MoveCursor(unsigned char row,unsigned char coloumn)
{
	char cmd=0x80;
	if(row>4||row<1||coloumn>16||coloumn<1)
	{
		cmd=0x80;
     a3a:	80 e8       	ldi	r24, 0x80	; 128
     a3c:	05 c0       	rjmp	.+10     	; 0xa48 <LCD_MoveCursor+0x46>
     a3e:	80 e8       	ldi	r24, 0x80	; 128
     a40:	03 c0       	rjmp	.+6      	; 0xa48 <LCD_MoveCursor+0x46>
     a42:	80 e8       	ldi	r24, 0x80	; 128
     a44:	01 c0       	rjmp	.+2      	; 0xa48 <LCD_MoveCursor+0x46>
	LCD_SendCommand(CLR_SCREEN);
	_delay_ms(10);
}
void LCD_MoveCursor(unsigned char row,unsigned char coloumn)
{
	char cmd=0x80;
     a46:	80 e8       	ldi	r24, 0x80	; 128
	
	else if(row==4)
	{
		cmd=0xD4+coloumn-1;
	}
	LCD_SendCommand(cmd);
     a48:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_SendCommand>
     a4c:	8f ec       	ldi	r24, 0xCF	; 207
     a4e:	97 e0       	ldi	r25, 0x07	; 7
     a50:	01 97       	sbiw	r24, 0x01	; 1
     a52:	f1 f7       	brne	.-4      	; 0xa50 <LCD_MoveCursor+0x4e>
     a54:	00 c0       	rjmp	.+0      	; 0xa56 <LCD_MoveCursor+0x54>
     a56:	00 00       	nop
     a58:	08 95       	ret

00000a5a <LED_Init>:
/**********************************************************************************************/
#include "DIO_interface.h"
#include "Definitions.h"
void LED_Init(uint8_t port,uint8_t pin)
{
	DIO_SetPinDir(port,pin,OUTPUT);
     a5a:	41 e0       	ldi	r20, 0x01	; 1
     a5c:	0e 94 8f 02 	call	0x51e	; 0x51e <DIO_SetPinDir>
     a60:	08 95       	ret

00000a62 <LED_On>:
}
void LED_On(uint8_t port,uint8_t pin)
{
	DIO_WritePin(port,pin,1);
     a62:	41 e0       	ldi	r20, 0x01	; 1
     a64:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
     a68:	08 95       	ret

00000a6a <LED_Off>:
}
void LED_Off(uint8_t port,uint8_t pin)
{
	DIO_WritePin(port,pin,0);
     a6a:	40 e0       	ldi	r20, 0x00	; 0
     a6c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DIO_WritePin>
     a70:	08 95       	ret

00000a72 <__vector_1>:
		_delay_ms(500);
	}
}

ISR(INT0_vect)
{
     a72:	1f 92       	push	r1
     a74:	0f 92       	push	r0
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	0f 92       	push	r0
     a7a:	11 24       	eor	r1, r1
	temp_button_counter = 0;
     a7c:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <temp_button_counter>
	toggle_button_counter = 0;
     a80:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <toggle_button_counter>
}
     a84:	0f 90       	pop	r0
     a86:	0f be       	out	0x3f, r0	; 63
     a88:	0f 90       	pop	r0
     a8a:	1f 90       	pop	r1
     a8c:	18 95       	reti

00000a8e <__vector_2>:

ISR(INT1_vect)
{
     a8e:	1f 92       	push	r1
     a90:	0f 92       	push	r0
     a92:	0f b6       	in	r0, 0x3f	; 63
     a94:	0f 92       	push	r0
     a96:	11 24       	eor	r1, r1
     a98:	2f 93       	push	r18
     a9a:	8f 93       	push	r24
     a9c:	9f 93       	push	r25
     a9e:	2f ef       	ldi	r18, 0xFF	; 255
     aa0:	81 ee       	ldi	r24, 0xE1	; 225
     aa2:	94 e0       	ldi	r25, 0x04	; 4
     aa4:	21 50       	subi	r18, 0x01	; 1
     aa6:	80 40       	sbci	r24, 0x00	; 0
     aa8:	90 40       	sbci	r25, 0x00	; 0
     aaa:	e1 f7       	brne	.-8      	; 0xaa4 <__vector_2+0x16>
     aac:	00 c0       	rjmp	.+0      	; 0xaae <__vector_2+0x20>
     aae:	00 00       	nop
	_delay_ms(200);
	temp_button_counter ++;
     ab0:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <temp_button_counter>
     ab4:	8f 5f       	subi	r24, 0xFF	; 255
     ab6:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <temp_button_counter>
}
     aba:	9f 91       	pop	r25
     abc:	8f 91       	pop	r24
     abe:	2f 91       	pop	r18
     ac0:	0f 90       	pop	r0
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	0f 90       	pop	r0
     ac6:	1f 90       	pop	r1
     ac8:	18 95       	reti

00000aca <__vector_3>:

ISR(INT2_vect)
{
     aca:	1f 92       	push	r1
     acc:	0f 92       	push	r0
     ace:	0f b6       	in	r0, 0x3f	; 63
     ad0:	0f 92       	push	r0
     ad2:	11 24       	eor	r1, r1
     ad4:	2f 93       	push	r18
     ad6:	8f 93       	push	r24
     ad8:	9f 93       	push	r25
     ada:	2f ef       	ldi	r18, 0xFF	; 255
     adc:	81 ee       	ldi	r24, 0xE1	; 225
     ade:	94 e0       	ldi	r25, 0x04	; 4
     ae0:	21 50       	subi	r18, 0x01	; 1
     ae2:	80 40       	sbci	r24, 0x00	; 0
     ae4:	90 40       	sbci	r25, 0x00	; 0
     ae6:	e1 f7       	brne	.-8      	; 0xae0 <__vector_3+0x16>
     ae8:	00 c0       	rjmp	.+0      	; 0xaea <__vector_3+0x20>
     aea:	00 00       	nop
	_delay_ms(200);
	toggle_button_counter ++;
     aec:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <toggle_button_counter>
     af0:	8f 5f       	subi	r24, 0xFF	; 255
     af2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <toggle_button_counter>
}
     af6:	9f 91       	pop	r25
     af8:	8f 91       	pop	r24
     afa:	2f 91       	pop	r18
     afc:	0f 90       	pop	r0
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	0f 90       	pop	r0
     b02:	1f 90       	pop	r1
     b04:	18 95       	reti

00000b06 <map>:

short int map(float x, float in_min, float in_max, float out_min, float out_max) 
{
     b06:	4f 92       	push	r4
     b08:	5f 92       	push	r5
     b0a:	6f 92       	push	r6
     b0c:	7f 92       	push	r7
     b0e:	af 92       	push	r10
     b10:	bf 92       	push	r11
     b12:	cf 92       	push	r12
     b14:	df 92       	push	r13
     b16:	ef 92       	push	r14
     b18:	ff 92       	push	r15
     b1a:	0f 93       	push	r16
     b1c:	1f 93       	push	r17
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	cd b7       	in	r28, 0x3d	; 61
     b24:	de b7       	in	r29, 0x3e	; 62
     b26:	28 97       	sbiw	r28, 0x08	; 8
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	f8 94       	cli
     b2c:	de bf       	out	0x3e, r29	; 62
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	cd bf       	out	0x3d, r28	; 61
     b32:	29 01       	movw	r4, r18
     b34:	3a 01       	movw	r6, r20
     b36:	ed 82       	std	Y+5, r14	; 0x05
     b38:	fe 82       	std	Y+6, r15	; 0x06
     b3a:	0f 83       	std	Y+7, r16	; 0x07
     b3c:	18 87       	std	Y+8, r17	; 0x08
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     b3e:	0e 94 86 07 	call	0xf0c	; 0xf0c <__subsf3>
     b42:	69 83       	std	Y+1, r22	; 0x01
     b44:	7a 83       	std	Y+2, r23	; 0x02
     b46:	8b 83       	std	Y+3, r24	; 0x03
     b48:	9c 83       	std	Y+4, r25	; 0x04
     b4a:	a6 01       	movw	r20, r12
     b4c:	95 01       	movw	r18, r10
     b4e:	69 8d       	ldd	r22, Y+25	; 0x19
     b50:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b52:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b54:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b56:	0e 94 86 07 	call	0xf0c	; 0xf0c <__subsf3>
     b5a:	9b 01       	movw	r18, r22
     b5c:	ac 01       	movw	r20, r24
     b5e:	69 81       	ldd	r22, Y+1	; 0x01
     b60:	7a 81       	ldd	r23, Y+2	; 0x02
     b62:	8b 81       	ldd	r24, Y+3	; 0x03
     b64:	9c 81       	ldd	r25, Y+4	; 0x04
     b66:	0e 94 2e 09 	call	0x125c	; 0x125c <__mulsf3>
     b6a:	69 83       	std	Y+1, r22	; 0x01
     b6c:	7a 83       	std	Y+2, r23	; 0x02
     b6e:	8b 83       	std	Y+3, r24	; 0x03
     b70:	9c 83       	std	Y+4, r25	; 0x04
     b72:	a3 01       	movw	r20, r6
     b74:	92 01       	movw	r18, r4
     b76:	c8 01       	movw	r24, r16
     b78:	b7 01       	movw	r22, r14
     b7a:	0e 94 86 07 	call	0xf0c	; 0xf0c <__subsf3>
     b7e:	9b 01       	movw	r18, r22
     b80:	ac 01       	movw	r20, r24
     b82:	69 81       	ldd	r22, Y+1	; 0x01
     b84:	7a 81       	ldd	r23, Y+2	; 0x02
     b86:	8b 81       	ldd	r24, Y+3	; 0x03
     b88:	9c 81       	ldd	r25, Y+4	; 0x04
     b8a:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__divsf3>
     b8e:	9b 01       	movw	r18, r22
     b90:	ac 01       	movw	r20, r24
     b92:	c6 01       	movw	r24, r12
     b94:	b5 01       	movw	r22, r10
     b96:	0e 94 87 07 	call	0xf0e	; 0xf0e <__addsf3>
     b9a:	0e 94 65 08 	call	0x10ca	; 0x10ca <__fixsfsi>
}
     b9e:	cb 01       	movw	r24, r22
     ba0:	28 96       	adiw	r28, 0x08	; 8
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	f8 94       	cli
     ba6:	de bf       	out	0x3e, r29	; 62
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	cd bf       	out	0x3d, r28	; 61
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	1f 91       	pop	r17
     bb2:	0f 91       	pop	r16
     bb4:	ff 90       	pop	r15
     bb6:	ef 90       	pop	r14
     bb8:	df 90       	pop	r13
     bba:	cf 90       	pop	r12
     bbc:	bf 90       	pop	r11
     bbe:	af 90       	pop	r10
     bc0:	7f 90       	pop	r7
     bc2:	6f 90       	pop	r6
     bc4:	5f 90       	pop	r5
     bc6:	4f 90       	pop	r4
     bc8:	08 95       	ret

00000bca <main>:
int value1= 0;
int value2= 0;

int main(void)
{
	ADC_Init(A0);
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	0e 94 37 02 	call	0x46e	; 0x46e <ADC_Init>
	ADC_Init(A7);
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	0e 94 37 02 	call	0x46e	; 0x46e <ADC_Init>
	
	LED_Init('B', pin0);
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	82 e4       	ldi	r24, 0x42	; 66
     bda:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LED_Init>
	LED_Init('B', pin1);
     bde:	61 e0       	ldi	r22, 0x01	; 1
     be0:	82 e4       	ldi	r24, 0x42	; 66
     be2:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LED_Init>

	LCD_Init();
     be6:	0e 94 31 04 	call	0x862	; 0x862 <LCD_Init>
	
	BCD_to_SEVEN_SEG_Init(portd, 1);
     bea:	61 e0       	ldi	r22, 0x01	; 1
     bec:	84 e4       	ldi	r24, 0x44	; 68
     bee:	0e 94 5d 00 	call	0xba	; 0xba <BCD_to_SEVEN_SEG_Init>
	BCD_to_SEVEN_SEG_Init(portb, 1);
     bf2:	61 e0       	ldi	r22, 0x01	; 1
     bf4:	82 e4       	ldi	r24, 0x42	; 66
     bf6:	0e 94 5d 00 	call	0xba	; 0xba <BCD_to_SEVEN_SEG_Init>
	
	EXTI_vEnable(EXTI0);
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	0e 94 95 03 	call	0x72a	; 0x72a <EXTI_vEnable>
	EXTI_vActiveMode(EXTI0, RISING);
     c00:	61 e0       	ldi	r22, 0x01	; 1
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	0e 94 a7 03 	call	0x74e	; 0x74e <EXTI_vActiveMode>
	
	EXTI_vEnable(EXTI1);
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	0e 94 95 03 	call	0x72a	; 0x72a <EXTI_vEnable>
	EXTI_vActiveMode(EXTI1, RISING);
     c0e:	61 e0       	ldi	r22, 0x01	; 1
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	0e 94 a7 03 	call	0x74e	; 0x74e <EXTI_vActiveMode>
	
	EXTI_vEnable(EXTI2);
     c16:	82 e0       	ldi	r24, 0x02	; 2
     c18:	0e 94 95 03 	call	0x72a	; 0x72a <EXTI_vEnable>
	EXTI_vActiveMode(EXTI2, RISING);
     c1c:	61 e0       	ldi	r22, 0x01	; 1
     c1e:	82 e0       	ldi	r24, 0x02	; 2
     c20:	0e 94 a7 03 	call	0x74e	; 0x74e <EXTI_vActiveMode>
	
	LCD_SendCommand(CURSOR_ON_DISPLAY_OFF);
     c24:	8c e0       	ldi	r24, 0x0C	; 12
     c26:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_SendCommand>
	while(1)
	{
		degree = 0;
     c2a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		
		temp_sensor_reading = ADC_Read(A0);
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <ADC_Read>
     c34:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <temp_sensor_reading+0x1>
     c38:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <temp_sensor_reading>
		LDR_reading = ADC_Read(A7);
     c3c:	87 e0       	ldi	r24, 0x07	; 7
     c3e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <ADC_Read>
     c42:	bc 01       	movw	r22, r24
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	0e 94 9b 08 	call	0x1136	; 0x1136 <__floatunsisf>
		
		LDR_reading = map(LDR_reading, 10, 975, 0, 1023);
     c4c:	24 e4       	ldi	r18, 0x44	; 68
     c4e:	2f 93       	push	r18
     c50:	2f e7       	ldi	r18, 0x7F	; 127
     c52:	2f 93       	push	r18
     c54:	20 ec       	ldi	r18, 0xC0	; 192
     c56:	2f 93       	push	r18
     c58:	1f 92       	push	r1
     c5a:	a1 2c       	mov	r10, r1
     c5c:	b1 2c       	mov	r11, r1
     c5e:	65 01       	movw	r12, r10
     c60:	e1 2c       	mov	r14, r1
     c62:	10 ec       	ldi	r17, 0xC0	; 192
     c64:	f1 2e       	mov	r15, r17
     c66:	03 e7       	ldi	r16, 0x73	; 115
     c68:	14 e4       	ldi	r17, 0x44	; 68
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e2       	ldi	r20, 0x20	; 32
     c70:	51 e4       	ldi	r21, 0x41	; 65
     c72:	0e 94 83 05 	call	0xb06	; 0xb06 <map>
     c76:	0f 90       	pop	r0
     c78:	0f 90       	pop	r0
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	bc 01       	movw	r22, r24
     c80:	99 0f       	add	r25, r25
     c82:	88 0b       	sbc	r24, r24
     c84:	99 0b       	sbc	r25, r25
     c86:	0e 94 9d 08 	call	0x113a	; 0x113a <__floatsisf>
     c8a:	60 93 76 00 	sts	0x0076, r22	; 0x800076 <LDR_reading>
     c8e:	70 93 77 00 	sts	0x0077, r23	; 0x800077 <LDR_reading+0x1>
     c92:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <LDR_reading+0x2>
     c96:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <LDR_reading+0x3>
		light_intensity = ((LDR_reading/1023) * 100);
     c9a:	20 e0       	ldi	r18, 0x00	; 0
     c9c:	30 ec       	ldi	r19, 0xC0	; 192
     c9e:	4f e7       	ldi	r20, 0x7F	; 127
     ca0:	54 e4       	ldi	r21, 0x44	; 68
     ca2:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__divsf3>
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	48 ec       	ldi	r20, 0xC8	; 200
     cac:	52 e4       	ldi	r21, 0x42	; 66
     cae:	0e 94 2e 09 	call	0x125c	; 0x125c <__mulsf3>
     cb2:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <light_intensity>
     cb6:	70 93 81 00 	sts	0x0081, r23	; 0x800081 <light_intensity+0x1>
     cba:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <light_intensity+0x2>
     cbe:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <light_intensity+0x3>
		// light_intensity = LDR_reading;

		temp = (temp_sensor_reading * vref) / (1024 * 0.01);
     cc2:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <temp_sensor_reading>
     cc6:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <temp_sensor_reading+0x1>
     cca:	cb 01       	movw	r24, r22
     ccc:	88 0f       	add	r24, r24
     cce:	99 1f       	adc	r25, r25
     cd0:	88 0f       	add	r24, r24
     cd2:	99 1f       	adc	r25, r25
     cd4:	68 0f       	add	r22, r24
     cd6:	79 1f       	adc	r23, r25
     cd8:	07 2e       	mov	r0, r23
     cda:	00 0c       	add	r0, r0
     cdc:	88 0b       	sbc	r24, r24
     cde:	99 0b       	sbc	r25, r25
     ce0:	0e 94 9d 08 	call	0x113a	; 0x113a <__floatsisf>
     ce4:	2a e0       	ldi	r18, 0x0A	; 10
     ce6:	37 ed       	ldi	r19, 0xD7	; 215
     ce8:	43 e2       	ldi	r20, 0x23	; 35
     cea:	51 e4       	ldi	r21, 0x41	; 65
     cec:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__divsf3>
     cf0:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <temp>
     cf4:	70 93 7d 00 	sts	0x007D, r23	; 0x80007d <temp+0x1>
     cf8:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <temp+0x2>
     cfc:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <temp+0x3>
		
		if(temp >= 30)
     d00:	20 e0       	ldi	r18, 0x00	; 0
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	40 ef       	ldi	r20, 0xF0	; 240
     d06:	51 e4       	ldi	r21, 0x41	; 65
     d08:	0e 94 29 09 	call	0x1252	; 0x1252 <__gesf2>
     d0c:	88 23       	and	r24, r24
     d0e:	2c f0       	brlt	.+10     	; 0xd1a <main+0x150>
			{
				LED_On('B', pin0);
     d10:	60 e0       	ldi	r22, 0x00	; 0
     d12:	82 e4       	ldi	r24, 0x42	; 66
     d14:	0e 94 31 05 	call	0xa62	; 0xa62 <LED_On>
     d18:	04 c0       	rjmp	.+8      	; 0xd22 <main+0x158>
			}
		else
			{
				LED_Off('B', pin0);
     d1a:	60 e0       	ldi	r22, 0x00	; 0
     d1c:	82 e4       	ldi	r24, 0x42	; 66
     d1e:	0e 94 35 05 	call	0xa6a	; 0xa6a <LED_Off>
			}
		
		if(light_intensity >= 70)
     d22:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <light_intensity>
     d26:	70 91 81 00 	lds	r23, 0x0081	; 0x800081 <light_intensity+0x1>
     d2a:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <light_intensity+0x2>
     d2e:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <light_intensity+0x3>
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	4c e8       	ldi	r20, 0x8C	; 140
     d38:	52 e4       	ldi	r21, 0x42	; 66
     d3a:	0e 94 29 09 	call	0x1252	; 0x1252 <__gesf2>
     d3e:	88 23       	and	r24, r24
     d40:	2c f0       	brlt	.+10     	; 0xd4c <main+0x182>
			{
				LED_On('B', pin1);
     d42:	61 e0       	ldi	r22, 0x01	; 1
     d44:	82 e4       	ldi	r24, 0x42	; 66
     d46:	0e 94 31 05 	call	0xa62	; 0xa62 <LED_On>
     d4a:	04 c0       	rjmp	.+8      	; 0xd54 <main+0x18a>
			}
		else
			{
				LED_Off('B', pin1);
     d4c:	61 e0       	ldi	r22, 0x01	; 1
     d4e:	82 e4       	ldi	r24, 0x42	; 66
     d50:	0e 94 35 05 	call	0xa6a	; 0xa6a <LED_Off>
			}		

		
		if(temp_button_counter %2 != 0)
     d54:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <temp_button_counter>
     d58:	80 ff       	sbrs	r24, 0
     d5a:	26 c0       	rjmp	.+76     	; 0xda8 <main+0x1de>
		{
			temp = (temp * 9/5) + 32;
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	40 e1       	ldi	r20, 0x10	; 16
     d62:	51 e4       	ldi	r21, 0x41	; 65
     d64:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <temp>
     d68:	70 91 7d 00 	lds	r23, 0x007D	; 0x80007d <temp+0x1>
     d6c:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <temp+0x2>
     d70:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <temp+0x3>
     d74:	0e 94 2e 09 	call	0x125c	; 0x125c <__mulsf3>
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	40 ea       	ldi	r20, 0xA0	; 160
     d7e:	50 e4       	ldi	r21, 0x40	; 64
     d80:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__divsf3>
     d84:	20 e0       	ldi	r18, 0x00	; 0
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	40 e0       	ldi	r20, 0x00	; 0
     d8a:	52 e4       	ldi	r21, 0x42	; 66
     d8c:	0e 94 87 07 	call	0xf0e	; 0xf0e <__addsf3>
     d90:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <temp>
     d94:	70 93 7d 00 	sts	0x007D, r23	; 0x80007d <temp+0x1>
     d98:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <temp+0x2>
     d9c:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <temp+0x3>
			degree = 'F';
     da0:	86 e4       	ldi	r24, 0x46	; 70
     da2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     da6:	03 c0       	rjmp	.+6      	; 0xdae <main+0x1e4>
		}
		else
		{
			degree = 'C';
     da8:	83 e4       	ldi	r24, 0x43	; 67
     daa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		
		LCD_ClearScreen();
     dae:	0e 94 f7 04 	call	0x9ee	; 0x9ee <LCD_ClearScreen>
	
		if(toggle_button_counter %2 == 0)
     db2:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <toggle_button_counter>
     db6:	80 fd       	sbrc	r24, 0
     db8:	4d c0       	rjmp	.+154    	; 0xe54 <main+0x28a>
		{
			LCD_MoveCursor(1, 1);
     dba:	61 e0       	ldi	r22, 0x01	; 1
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	0e 94 01 05 	call	0xa02	; 0xa02 <LCD_MoveCursor>
			LCD_SendString("Temp: ");
     dc2:	81 e6       	ldi	r24, 0x61	; 97
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_SendString>
			LCD_SendNumber(temp);
     dca:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <temp>
     dce:	70 91 7d 00 	lds	r23, 0x007D	; 0x80007d <temp+0x1>
     dd2:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <temp+0x2>
     dd6:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <temp+0x3>
     dda:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__fixunssfsi>
     dde:	cb 01       	movw	r24, r22
     de0:	0e 94 83 04 	call	0x906	; 0x906 <LCD_SendNumber>
			LCD_SendChar(degree);
     de4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     de8:	0e 94 77 04 	call	0x8ee	; 0x8ee <LCD_SendChar>
				
			value2 = light_intensity;
     dec:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <light_intensity>
     df0:	70 91 81 00 	lds	r23, 0x0081	; 0x800081 <light_intensity+0x1>
     df4:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <light_intensity+0x2>
     df8:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <light_intensity+0x3>
     dfc:	0e 94 65 08 	call	0x10ca	; 0x10ca <__fixsfsi>
     e00:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <__data_end+0x1>
     e04:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <__data_end>
			if(value2 == 100)
     e08:	64 36       	cpi	r22, 0x64	; 100
     e0a:	71 05       	cpc	r23, r1
     e0c:	59 f4       	brne	.+22     	; 0xe24 <main+0x25a>
			{
				BCD_to_SEVEN_SEG_Write(portd, 1, 9);
     e0e:	49 e0       	ldi	r20, 0x09	; 9
     e10:	61 e0       	ldi	r22, 0x01	; 1
     e12:	84 e4       	ldi	r24, 0x44	; 68
     e14:	0e 94 8b 00 	call	0x116	; 0x116 <BCD_to_SEVEN_SEG_Write>
				BCD_to_SEVEN_SEG_Write(portb, 1, 9);
     e18:	49 e0       	ldi	r20, 0x09	; 9
     e1a:	61 e0       	ldi	r22, 0x01	; 1
     e1c:	82 e4       	ldi	r24, 0x42	; 66
     e1e:	0e 94 8b 00 	call	0x116	; 0x116 <BCD_to_SEVEN_SEG_Write>
     e22:	6a c0       	rjmp	.+212    	; 0xef8 <main+0x32e>
			}
			else
			{
				BCD_to_SEVEN_SEG_Write(portd, 1, value2/10);
     e24:	ca e0       	ldi	r28, 0x0A	; 10
     e26:	d0 e0       	ldi	r29, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	be 01       	movw	r22, r28
     e2c:	0e 94 bf 09 	call	0x137e	; 0x137e <__divmodhi4>
     e30:	46 2f       	mov	r20, r22
     e32:	61 e0       	ldi	r22, 0x01	; 1
     e34:	84 e4       	ldi	r24, 0x44	; 68
     e36:	0e 94 8b 00 	call	0x116	; 0x116 <BCD_to_SEVEN_SEG_Write>
				BCD_to_SEVEN_SEG_Write(portb, 1, value2%10);
     e3a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
     e3e:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__data_end+0x1>
     e42:	be 01       	movw	r22, r28
     e44:	0e 94 bf 09 	call	0x137e	; 0x137e <__divmodhi4>
     e48:	48 2f       	mov	r20, r24
     e4a:	61 e0       	ldi	r22, 0x01	; 1
     e4c:	82 e4       	ldi	r24, 0x42	; 66
     e4e:	0e 94 8b 00 	call	0x116	; 0x116 <BCD_to_SEVEN_SEG_Write>
     e52:	52 c0       	rjmp	.+164    	; 0xef8 <main+0x32e>
			}
		}
		else
		{
			LCD_MoveCursor(1, 1);
     e54:	61 e0       	ldi	r22, 0x01	; 1
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	0e 94 01 05 	call	0xa02	; 0xa02 <LCD_MoveCursor>
			LCD_SendString("Light: ");
     e5c:	88 e6       	ldi	r24, 0x68	; 104
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_SendString>
			LCD_SendNumber(light_intensity);
     e64:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <light_intensity>
     e68:	70 91 81 00 	lds	r23, 0x0081	; 0x800081 <light_intensity+0x1>
     e6c:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <light_intensity+0x2>
     e70:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <light_intensity+0x3>
     e74:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__fixunssfsi>
     e78:	cb 01       	movw	r24, r22
     e7a:	0e 94 83 04 	call	0x906	; 0x906 <LCD_SendNumber>
			LCD_SendChar('%');
     e7e:	85 e2       	ldi	r24, 0x25	; 37
     e80:	0e 94 77 04 	call	0x8ee	; 0x8ee <LCD_SendChar>
			
			value1 = temp;
     e84:	c0 90 7c 00 	lds	r12, 0x007C	; 0x80007c <temp>
     e88:	d0 90 7d 00 	lds	r13, 0x007D	; 0x80007d <temp+0x1>
     e8c:	e0 90 7e 00 	lds	r14, 0x007E	; 0x80007e <temp+0x2>
     e90:	f0 90 7f 00 	lds	r15, 0x007F	; 0x80007f <temp+0x3>
     e94:	c7 01       	movw	r24, r14
     e96:	b6 01       	movw	r22, r12
     e98:	0e 94 65 08 	call	0x10ca	; 0x10ca <__fixsfsi>
     e9c:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <value1+0x1>
     ea0:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <value1>
			if(value1 >= 99)
     ea4:	63 36       	cpi	r22, 0x63	; 99
     ea6:	71 05       	cpc	r23, r1
     ea8:	5c f0       	brlt	.+22     	; 0xec0 <main+0x2f6>
			{
				BCD_to_SEVEN_SEG_Write(portd, 1, 9);
     eaa:	49 e0       	ldi	r20, 0x09	; 9
     eac:	61 e0       	ldi	r22, 0x01	; 1
     eae:	84 e4       	ldi	r24, 0x44	; 68
     eb0:	0e 94 8b 00 	call	0x116	; 0x116 <BCD_to_SEVEN_SEG_Write>
				BCD_to_SEVEN_SEG_Write(portb, 1, 9);
     eb4:	49 e0       	ldi	r20, 0x09	; 9
     eb6:	61 e0       	ldi	r22, 0x01	; 1
     eb8:	82 e4       	ldi	r24, 0x42	; 66
     eba:	0e 94 8b 00 	call	0x116	; 0x116 <BCD_to_SEVEN_SEG_Write>
     ebe:	1c c0       	rjmp	.+56     	; 0xef8 <main+0x32e>
			}
			else
			{
				BCD_to_SEVEN_SEG_Write(portd, 1, temp/10);
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	40 e2       	ldi	r20, 0x20	; 32
     ec6:	51 e4       	ldi	r21, 0x41	; 65
     ec8:	c7 01       	movw	r24, r14
     eca:	b6 01       	movw	r22, r12
     ecc:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__divsf3>
     ed0:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__fixunssfsi>
     ed4:	46 2f       	mov	r20, r22
     ed6:	61 e0       	ldi	r22, 0x01	; 1
     ed8:	84 e4       	ldi	r24, 0x44	; 68
     eda:	0e 94 8b 00 	call	0x116	; 0x116 <BCD_to_SEVEN_SEG_Write>
				BCD_to_SEVEN_SEG_Write(portb, 1, value1%10);
     ede:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <value1>
     ee2:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <value1+0x1>
     ee6:	6a e0       	ldi	r22, 0x0A	; 10
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	0e 94 bf 09 	call	0x137e	; 0x137e <__divmodhi4>
     eee:	48 2f       	mov	r20, r24
     ef0:	61 e0       	ldi	r22, 0x01	; 1
     ef2:	82 e4       	ldi	r24, 0x42	; 66
     ef4:	0e 94 8b 00 	call	0x116	; 0x116 <BCD_to_SEVEN_SEG_Write>
     ef8:	2f ef       	ldi	r18, 0xFF	; 255
     efa:	84 e3       	ldi	r24, 0x34	; 52
     efc:	9c e0       	ldi	r25, 0x0C	; 12
     efe:	21 50       	subi	r18, 0x01	; 1
     f00:	80 40       	sbci	r24, 0x00	; 0
     f02:	90 40       	sbci	r25, 0x00	; 0
     f04:	e1 f7       	brne	.-8      	; 0xefe <main+0x334>
     f06:	00 c0       	rjmp	.+0      	; 0xf08 <main+0x33e>
     f08:	00 00       	nop
     f0a:	8f ce       	rjmp	.-738    	; 0xc2a <main+0x60>

00000f0c <__subsf3>:
     f0c:	50 58       	subi	r21, 0x80	; 128

00000f0e <__addsf3>:
     f0e:	bb 27       	eor	r27, r27
     f10:	aa 27       	eor	r26, r26
     f12:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__addsf3x>
     f16:	0c 94 ef 08 	jmp	0x11de	; 0x11de <__fp_round>
     f1a:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <__fp_pscA>
     f1e:	38 f0       	brcs	.+14     	; 0xf2e <__addsf3+0x20>
     f20:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <__fp_pscB>
     f24:	20 f0       	brcs	.+8      	; 0xf2e <__addsf3+0x20>
     f26:	39 f4       	brne	.+14     	; 0xf36 <__addsf3+0x28>
     f28:	9f 3f       	cpi	r25, 0xFF	; 255
     f2a:	19 f4       	brne	.+6      	; 0xf32 <__addsf3+0x24>
     f2c:	26 f4       	brtc	.+8      	; 0xf36 <__addsf3+0x28>
     f2e:	0c 94 de 08 	jmp	0x11bc	; 0x11bc <__fp_nan>
     f32:	0e f4       	brtc	.+2      	; 0xf36 <__addsf3+0x28>
     f34:	e0 95       	com	r30
     f36:	e7 fb       	bst	r30, 7
     f38:	0c 94 d8 08 	jmp	0x11b0	; 0x11b0 <__fp_inf>

00000f3c <__addsf3x>:
     f3c:	e9 2f       	mov	r30, r25
     f3e:	0e 94 00 09 	call	0x1200	; 0x1200 <__fp_split3>
     f42:	58 f3       	brcs	.-42     	; 0xf1a <__addsf3+0xc>
     f44:	ba 17       	cp	r27, r26
     f46:	62 07       	cpc	r22, r18
     f48:	73 07       	cpc	r23, r19
     f4a:	84 07       	cpc	r24, r20
     f4c:	95 07       	cpc	r25, r21
     f4e:	20 f0       	brcs	.+8      	; 0xf58 <__addsf3x+0x1c>
     f50:	79 f4       	brne	.+30     	; 0xf70 <__addsf3x+0x34>
     f52:	a6 f5       	brtc	.+104    	; 0xfbc <__addsf3x+0x80>
     f54:	0c 94 22 09 	jmp	0x1244	; 0x1244 <__fp_zero>
     f58:	0e f4       	brtc	.+2      	; 0xf5c <__addsf3x+0x20>
     f5a:	e0 95       	com	r30
     f5c:	0b 2e       	mov	r0, r27
     f5e:	ba 2f       	mov	r27, r26
     f60:	a0 2d       	mov	r26, r0
     f62:	0b 01       	movw	r0, r22
     f64:	b9 01       	movw	r22, r18
     f66:	90 01       	movw	r18, r0
     f68:	0c 01       	movw	r0, r24
     f6a:	ca 01       	movw	r24, r20
     f6c:	a0 01       	movw	r20, r0
     f6e:	11 24       	eor	r1, r1
     f70:	ff 27       	eor	r31, r31
     f72:	59 1b       	sub	r21, r25
     f74:	99 f0       	breq	.+38     	; 0xf9c <__addsf3x+0x60>
     f76:	59 3f       	cpi	r21, 0xF9	; 249
     f78:	50 f4       	brcc	.+20     	; 0xf8e <__addsf3x+0x52>
     f7a:	50 3e       	cpi	r21, 0xE0	; 224
     f7c:	68 f1       	brcs	.+90     	; 0xfd8 <__addsf3x+0x9c>
     f7e:	1a 16       	cp	r1, r26
     f80:	f0 40       	sbci	r31, 0x00	; 0
     f82:	a2 2f       	mov	r26, r18
     f84:	23 2f       	mov	r18, r19
     f86:	34 2f       	mov	r19, r20
     f88:	44 27       	eor	r20, r20
     f8a:	58 5f       	subi	r21, 0xF8	; 248
     f8c:	f3 cf       	rjmp	.-26     	; 0xf74 <__addsf3x+0x38>
     f8e:	46 95       	lsr	r20
     f90:	37 95       	ror	r19
     f92:	27 95       	ror	r18
     f94:	a7 95       	ror	r26
     f96:	f0 40       	sbci	r31, 0x00	; 0
     f98:	53 95       	inc	r21
     f9a:	c9 f7       	brne	.-14     	; 0xf8e <__addsf3x+0x52>
     f9c:	7e f4       	brtc	.+30     	; 0xfbc <__addsf3x+0x80>
     f9e:	1f 16       	cp	r1, r31
     fa0:	ba 0b       	sbc	r27, r26
     fa2:	62 0b       	sbc	r22, r18
     fa4:	73 0b       	sbc	r23, r19
     fa6:	84 0b       	sbc	r24, r20
     fa8:	ba f0       	brmi	.+46     	; 0xfd8 <__addsf3x+0x9c>
     faa:	91 50       	subi	r25, 0x01	; 1
     fac:	a1 f0       	breq	.+40     	; 0xfd6 <__addsf3x+0x9a>
     fae:	ff 0f       	add	r31, r31
     fb0:	bb 1f       	adc	r27, r27
     fb2:	66 1f       	adc	r22, r22
     fb4:	77 1f       	adc	r23, r23
     fb6:	88 1f       	adc	r24, r24
     fb8:	c2 f7       	brpl	.-16     	; 0xfaa <__addsf3x+0x6e>
     fba:	0e c0       	rjmp	.+28     	; 0xfd8 <__addsf3x+0x9c>
     fbc:	ba 0f       	add	r27, r26
     fbe:	62 1f       	adc	r22, r18
     fc0:	73 1f       	adc	r23, r19
     fc2:	84 1f       	adc	r24, r20
     fc4:	48 f4       	brcc	.+18     	; 0xfd8 <__addsf3x+0x9c>
     fc6:	87 95       	ror	r24
     fc8:	77 95       	ror	r23
     fca:	67 95       	ror	r22
     fcc:	b7 95       	ror	r27
     fce:	f7 95       	ror	r31
     fd0:	9e 3f       	cpi	r25, 0xFE	; 254
     fd2:	08 f0       	brcs	.+2      	; 0xfd6 <__addsf3x+0x9a>
     fd4:	b0 cf       	rjmp	.-160    	; 0xf36 <__addsf3+0x28>
     fd6:	93 95       	inc	r25
     fd8:	88 0f       	add	r24, r24
     fda:	08 f0       	brcs	.+2      	; 0xfde <__addsf3x+0xa2>
     fdc:	99 27       	eor	r25, r25
     fde:	ee 0f       	add	r30, r30
     fe0:	97 95       	ror	r25
     fe2:	87 95       	ror	r24
     fe4:	08 95       	ret

00000fe6 <__divsf3>:
     fe6:	0e 94 07 08 	call	0x100e	; 0x100e <__divsf3x>
     fea:	0c 94 ef 08 	jmp	0x11de	; 0x11de <__fp_round>
     fee:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <__fp_pscB>
     ff2:	58 f0       	brcs	.+22     	; 0x100a <__divsf3+0x24>
     ff4:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <__fp_pscA>
     ff8:	40 f0       	brcs	.+16     	; 0x100a <__divsf3+0x24>
     ffa:	29 f4       	brne	.+10     	; 0x1006 <__divsf3+0x20>
     ffc:	5f 3f       	cpi	r21, 0xFF	; 255
     ffe:	29 f0       	breq	.+10     	; 0x100a <__divsf3+0x24>
    1000:	0c 94 d8 08 	jmp	0x11b0	; 0x11b0 <__fp_inf>
    1004:	51 11       	cpse	r21, r1
    1006:	0c 94 23 09 	jmp	0x1246	; 0x1246 <__fp_szero>
    100a:	0c 94 de 08 	jmp	0x11bc	; 0x11bc <__fp_nan>

0000100e <__divsf3x>:
    100e:	0e 94 00 09 	call	0x1200	; 0x1200 <__fp_split3>
    1012:	68 f3       	brcs	.-38     	; 0xfee <__divsf3+0x8>

00001014 <__divsf3_pse>:
    1014:	99 23       	and	r25, r25
    1016:	b1 f3       	breq	.-20     	; 0x1004 <__divsf3+0x1e>
    1018:	55 23       	and	r21, r21
    101a:	91 f3       	breq	.-28     	; 0x1000 <__divsf3+0x1a>
    101c:	95 1b       	sub	r25, r21
    101e:	55 0b       	sbc	r21, r21
    1020:	bb 27       	eor	r27, r27
    1022:	aa 27       	eor	r26, r26
    1024:	62 17       	cp	r22, r18
    1026:	73 07       	cpc	r23, r19
    1028:	84 07       	cpc	r24, r20
    102a:	38 f0       	brcs	.+14     	; 0x103a <__divsf3_pse+0x26>
    102c:	9f 5f       	subi	r25, 0xFF	; 255
    102e:	5f 4f       	sbci	r21, 0xFF	; 255
    1030:	22 0f       	add	r18, r18
    1032:	33 1f       	adc	r19, r19
    1034:	44 1f       	adc	r20, r20
    1036:	aa 1f       	adc	r26, r26
    1038:	a9 f3       	breq	.-22     	; 0x1024 <__divsf3_pse+0x10>
    103a:	35 d0       	rcall	.+106    	; 0x10a6 <__divsf3_pse+0x92>
    103c:	0e 2e       	mov	r0, r30
    103e:	3a f0       	brmi	.+14     	; 0x104e <__divsf3_pse+0x3a>
    1040:	e0 e8       	ldi	r30, 0x80	; 128
    1042:	32 d0       	rcall	.+100    	; 0x10a8 <__divsf3_pse+0x94>
    1044:	91 50       	subi	r25, 0x01	; 1
    1046:	50 40       	sbci	r21, 0x00	; 0
    1048:	e6 95       	lsr	r30
    104a:	00 1c       	adc	r0, r0
    104c:	ca f7       	brpl	.-14     	; 0x1040 <__divsf3_pse+0x2c>
    104e:	2b d0       	rcall	.+86     	; 0x10a6 <__divsf3_pse+0x92>
    1050:	fe 2f       	mov	r31, r30
    1052:	29 d0       	rcall	.+82     	; 0x10a6 <__divsf3_pse+0x92>
    1054:	66 0f       	add	r22, r22
    1056:	77 1f       	adc	r23, r23
    1058:	88 1f       	adc	r24, r24
    105a:	bb 1f       	adc	r27, r27
    105c:	26 17       	cp	r18, r22
    105e:	37 07       	cpc	r19, r23
    1060:	48 07       	cpc	r20, r24
    1062:	ab 07       	cpc	r26, r27
    1064:	b0 e8       	ldi	r27, 0x80	; 128
    1066:	09 f0       	breq	.+2      	; 0x106a <__divsf3_pse+0x56>
    1068:	bb 0b       	sbc	r27, r27
    106a:	80 2d       	mov	r24, r0
    106c:	bf 01       	movw	r22, r30
    106e:	ff 27       	eor	r31, r31
    1070:	93 58       	subi	r25, 0x83	; 131
    1072:	5f 4f       	sbci	r21, 0xFF	; 255
    1074:	3a f0       	brmi	.+14     	; 0x1084 <__divsf3_pse+0x70>
    1076:	9e 3f       	cpi	r25, 0xFE	; 254
    1078:	51 05       	cpc	r21, r1
    107a:	78 f0       	brcs	.+30     	; 0x109a <__divsf3_pse+0x86>
    107c:	0c 94 d8 08 	jmp	0x11b0	; 0x11b0 <__fp_inf>
    1080:	0c 94 23 09 	jmp	0x1246	; 0x1246 <__fp_szero>
    1084:	5f 3f       	cpi	r21, 0xFF	; 255
    1086:	e4 f3       	brlt	.-8      	; 0x1080 <__divsf3_pse+0x6c>
    1088:	98 3e       	cpi	r25, 0xE8	; 232
    108a:	d4 f3       	brlt	.-12     	; 0x1080 <__divsf3_pse+0x6c>
    108c:	86 95       	lsr	r24
    108e:	77 95       	ror	r23
    1090:	67 95       	ror	r22
    1092:	b7 95       	ror	r27
    1094:	f7 95       	ror	r31
    1096:	9f 5f       	subi	r25, 0xFF	; 255
    1098:	c9 f7       	brne	.-14     	; 0x108c <__divsf3_pse+0x78>
    109a:	88 0f       	add	r24, r24
    109c:	91 1d       	adc	r25, r1
    109e:	96 95       	lsr	r25
    10a0:	87 95       	ror	r24
    10a2:	97 f9       	bld	r25, 7
    10a4:	08 95       	ret
    10a6:	e1 e0       	ldi	r30, 0x01	; 1
    10a8:	66 0f       	add	r22, r22
    10aa:	77 1f       	adc	r23, r23
    10ac:	88 1f       	adc	r24, r24
    10ae:	bb 1f       	adc	r27, r27
    10b0:	62 17       	cp	r22, r18
    10b2:	73 07       	cpc	r23, r19
    10b4:	84 07       	cpc	r24, r20
    10b6:	ba 07       	cpc	r27, r26
    10b8:	20 f0       	brcs	.+8      	; 0x10c2 <__divsf3_pse+0xae>
    10ba:	62 1b       	sub	r22, r18
    10bc:	73 0b       	sbc	r23, r19
    10be:	84 0b       	sbc	r24, r20
    10c0:	ba 0b       	sbc	r27, r26
    10c2:	ee 1f       	adc	r30, r30
    10c4:	88 f7       	brcc	.-30     	; 0x10a8 <__divsf3_pse+0x94>
    10c6:	e0 95       	com	r30
    10c8:	08 95       	ret

000010ca <__fixsfsi>:
    10ca:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__fixunssfsi>
    10ce:	68 94       	set
    10d0:	b1 11       	cpse	r27, r1
    10d2:	0c 94 23 09 	jmp	0x1246	; 0x1246 <__fp_szero>
    10d6:	08 95       	ret

000010d8 <__fixunssfsi>:
    10d8:	0e 94 08 09 	call	0x1210	; 0x1210 <__fp_splitA>
    10dc:	88 f0       	brcs	.+34     	; 0x1100 <__fixunssfsi+0x28>
    10de:	9f 57       	subi	r25, 0x7F	; 127
    10e0:	98 f0       	brcs	.+38     	; 0x1108 <__fixunssfsi+0x30>
    10e2:	b9 2f       	mov	r27, r25
    10e4:	99 27       	eor	r25, r25
    10e6:	b7 51       	subi	r27, 0x17	; 23
    10e8:	b0 f0       	brcs	.+44     	; 0x1116 <__fixunssfsi+0x3e>
    10ea:	e1 f0       	breq	.+56     	; 0x1124 <__fixunssfsi+0x4c>
    10ec:	66 0f       	add	r22, r22
    10ee:	77 1f       	adc	r23, r23
    10f0:	88 1f       	adc	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	1a f0       	brmi	.+6      	; 0x10fc <__fixunssfsi+0x24>
    10f6:	ba 95       	dec	r27
    10f8:	c9 f7       	brne	.-14     	; 0x10ec <__fixunssfsi+0x14>
    10fa:	14 c0       	rjmp	.+40     	; 0x1124 <__fixunssfsi+0x4c>
    10fc:	b1 30       	cpi	r27, 0x01	; 1
    10fe:	91 f0       	breq	.+36     	; 0x1124 <__fixunssfsi+0x4c>
    1100:	0e 94 22 09 	call	0x1244	; 0x1244 <__fp_zero>
    1104:	b1 e0       	ldi	r27, 0x01	; 1
    1106:	08 95       	ret
    1108:	0c 94 22 09 	jmp	0x1244	; 0x1244 <__fp_zero>
    110c:	67 2f       	mov	r22, r23
    110e:	78 2f       	mov	r23, r24
    1110:	88 27       	eor	r24, r24
    1112:	b8 5f       	subi	r27, 0xF8	; 248
    1114:	39 f0       	breq	.+14     	; 0x1124 <__fixunssfsi+0x4c>
    1116:	b9 3f       	cpi	r27, 0xF9	; 249
    1118:	cc f3       	brlt	.-14     	; 0x110c <__fixunssfsi+0x34>
    111a:	86 95       	lsr	r24
    111c:	77 95       	ror	r23
    111e:	67 95       	ror	r22
    1120:	b3 95       	inc	r27
    1122:	d9 f7       	brne	.-10     	; 0x111a <__fixunssfsi+0x42>
    1124:	3e f4       	brtc	.+14     	; 0x1134 <__fixunssfsi+0x5c>
    1126:	90 95       	com	r25
    1128:	80 95       	com	r24
    112a:	70 95       	com	r23
    112c:	61 95       	neg	r22
    112e:	7f 4f       	sbci	r23, 0xFF	; 255
    1130:	8f 4f       	sbci	r24, 0xFF	; 255
    1132:	9f 4f       	sbci	r25, 0xFF	; 255
    1134:	08 95       	ret

00001136 <__floatunsisf>:
    1136:	e8 94       	clt
    1138:	09 c0       	rjmp	.+18     	; 0x114c <__floatsisf+0x12>

0000113a <__floatsisf>:
    113a:	97 fb       	bst	r25, 7
    113c:	3e f4       	brtc	.+14     	; 0x114c <__floatsisf+0x12>
    113e:	90 95       	com	r25
    1140:	80 95       	com	r24
    1142:	70 95       	com	r23
    1144:	61 95       	neg	r22
    1146:	7f 4f       	sbci	r23, 0xFF	; 255
    1148:	8f 4f       	sbci	r24, 0xFF	; 255
    114a:	9f 4f       	sbci	r25, 0xFF	; 255
    114c:	99 23       	and	r25, r25
    114e:	a9 f0       	breq	.+42     	; 0x117a <__floatsisf+0x40>
    1150:	f9 2f       	mov	r31, r25
    1152:	96 e9       	ldi	r25, 0x96	; 150
    1154:	bb 27       	eor	r27, r27
    1156:	93 95       	inc	r25
    1158:	f6 95       	lsr	r31
    115a:	87 95       	ror	r24
    115c:	77 95       	ror	r23
    115e:	67 95       	ror	r22
    1160:	b7 95       	ror	r27
    1162:	f1 11       	cpse	r31, r1
    1164:	f8 cf       	rjmp	.-16     	; 0x1156 <__floatsisf+0x1c>
    1166:	fa f4       	brpl	.+62     	; 0x11a6 <__floatsisf+0x6c>
    1168:	bb 0f       	add	r27, r27
    116a:	11 f4       	brne	.+4      	; 0x1170 <__floatsisf+0x36>
    116c:	60 ff       	sbrs	r22, 0
    116e:	1b c0       	rjmp	.+54     	; 0x11a6 <__floatsisf+0x6c>
    1170:	6f 5f       	subi	r22, 0xFF	; 255
    1172:	7f 4f       	sbci	r23, 0xFF	; 255
    1174:	8f 4f       	sbci	r24, 0xFF	; 255
    1176:	9f 4f       	sbci	r25, 0xFF	; 255
    1178:	16 c0       	rjmp	.+44     	; 0x11a6 <__floatsisf+0x6c>
    117a:	88 23       	and	r24, r24
    117c:	11 f0       	breq	.+4      	; 0x1182 <__floatsisf+0x48>
    117e:	96 e9       	ldi	r25, 0x96	; 150
    1180:	11 c0       	rjmp	.+34     	; 0x11a4 <__floatsisf+0x6a>
    1182:	77 23       	and	r23, r23
    1184:	21 f0       	breq	.+8      	; 0x118e <__floatsisf+0x54>
    1186:	9e e8       	ldi	r25, 0x8E	; 142
    1188:	87 2f       	mov	r24, r23
    118a:	76 2f       	mov	r23, r22
    118c:	05 c0       	rjmp	.+10     	; 0x1198 <__floatsisf+0x5e>
    118e:	66 23       	and	r22, r22
    1190:	71 f0       	breq	.+28     	; 0x11ae <__floatsisf+0x74>
    1192:	96 e8       	ldi	r25, 0x86	; 134
    1194:	86 2f       	mov	r24, r22
    1196:	70 e0       	ldi	r23, 0x00	; 0
    1198:	60 e0       	ldi	r22, 0x00	; 0
    119a:	2a f0       	brmi	.+10     	; 0x11a6 <__floatsisf+0x6c>
    119c:	9a 95       	dec	r25
    119e:	66 0f       	add	r22, r22
    11a0:	77 1f       	adc	r23, r23
    11a2:	88 1f       	adc	r24, r24
    11a4:	da f7       	brpl	.-10     	; 0x119c <__floatsisf+0x62>
    11a6:	88 0f       	add	r24, r24
    11a8:	96 95       	lsr	r25
    11aa:	87 95       	ror	r24
    11ac:	97 f9       	bld	r25, 7
    11ae:	08 95       	ret

000011b0 <__fp_inf>:
    11b0:	97 f9       	bld	r25, 7
    11b2:	9f 67       	ori	r25, 0x7F	; 127
    11b4:	80 e8       	ldi	r24, 0x80	; 128
    11b6:	70 e0       	ldi	r23, 0x00	; 0
    11b8:	60 e0       	ldi	r22, 0x00	; 0
    11ba:	08 95       	ret

000011bc <__fp_nan>:
    11bc:	9f ef       	ldi	r25, 0xFF	; 255
    11be:	80 ec       	ldi	r24, 0xC0	; 192
    11c0:	08 95       	ret

000011c2 <__fp_pscA>:
    11c2:	00 24       	eor	r0, r0
    11c4:	0a 94       	dec	r0
    11c6:	16 16       	cp	r1, r22
    11c8:	17 06       	cpc	r1, r23
    11ca:	18 06       	cpc	r1, r24
    11cc:	09 06       	cpc	r0, r25
    11ce:	08 95       	ret

000011d0 <__fp_pscB>:
    11d0:	00 24       	eor	r0, r0
    11d2:	0a 94       	dec	r0
    11d4:	12 16       	cp	r1, r18
    11d6:	13 06       	cpc	r1, r19
    11d8:	14 06       	cpc	r1, r20
    11da:	05 06       	cpc	r0, r21
    11dc:	08 95       	ret

000011de <__fp_round>:
    11de:	09 2e       	mov	r0, r25
    11e0:	03 94       	inc	r0
    11e2:	00 0c       	add	r0, r0
    11e4:	11 f4       	brne	.+4      	; 0x11ea <__fp_round+0xc>
    11e6:	88 23       	and	r24, r24
    11e8:	52 f0       	brmi	.+20     	; 0x11fe <__fp_round+0x20>
    11ea:	bb 0f       	add	r27, r27
    11ec:	40 f4       	brcc	.+16     	; 0x11fe <__fp_round+0x20>
    11ee:	bf 2b       	or	r27, r31
    11f0:	11 f4       	brne	.+4      	; 0x11f6 <__fp_round+0x18>
    11f2:	60 ff       	sbrs	r22, 0
    11f4:	04 c0       	rjmp	.+8      	; 0x11fe <__fp_round+0x20>
    11f6:	6f 5f       	subi	r22, 0xFF	; 255
    11f8:	7f 4f       	sbci	r23, 0xFF	; 255
    11fa:	8f 4f       	sbci	r24, 0xFF	; 255
    11fc:	9f 4f       	sbci	r25, 0xFF	; 255
    11fe:	08 95       	ret

00001200 <__fp_split3>:
    1200:	57 fd       	sbrc	r21, 7
    1202:	90 58       	subi	r25, 0x80	; 128
    1204:	44 0f       	add	r20, r20
    1206:	55 1f       	adc	r21, r21
    1208:	59 f0       	breq	.+22     	; 0x1220 <__fp_splitA+0x10>
    120a:	5f 3f       	cpi	r21, 0xFF	; 255
    120c:	71 f0       	breq	.+28     	; 0x122a <__fp_splitA+0x1a>
    120e:	47 95       	ror	r20

00001210 <__fp_splitA>:
    1210:	88 0f       	add	r24, r24
    1212:	97 fb       	bst	r25, 7
    1214:	99 1f       	adc	r25, r25
    1216:	61 f0       	breq	.+24     	; 0x1230 <__fp_splitA+0x20>
    1218:	9f 3f       	cpi	r25, 0xFF	; 255
    121a:	79 f0       	breq	.+30     	; 0x123a <__fp_splitA+0x2a>
    121c:	87 95       	ror	r24
    121e:	08 95       	ret
    1220:	12 16       	cp	r1, r18
    1222:	13 06       	cpc	r1, r19
    1224:	14 06       	cpc	r1, r20
    1226:	55 1f       	adc	r21, r21
    1228:	f2 cf       	rjmp	.-28     	; 0x120e <__fp_split3+0xe>
    122a:	46 95       	lsr	r20
    122c:	f1 df       	rcall	.-30     	; 0x1210 <__fp_splitA>
    122e:	08 c0       	rjmp	.+16     	; 0x1240 <__fp_splitA+0x30>
    1230:	16 16       	cp	r1, r22
    1232:	17 06       	cpc	r1, r23
    1234:	18 06       	cpc	r1, r24
    1236:	99 1f       	adc	r25, r25
    1238:	f1 cf       	rjmp	.-30     	; 0x121c <__fp_splitA+0xc>
    123a:	86 95       	lsr	r24
    123c:	71 05       	cpc	r23, r1
    123e:	61 05       	cpc	r22, r1
    1240:	08 94       	sec
    1242:	08 95       	ret

00001244 <__fp_zero>:
    1244:	e8 94       	clt

00001246 <__fp_szero>:
    1246:	bb 27       	eor	r27, r27
    1248:	66 27       	eor	r22, r22
    124a:	77 27       	eor	r23, r23
    124c:	cb 01       	movw	r24, r22
    124e:	97 f9       	bld	r25, 7
    1250:	08 95       	ret

00001252 <__gesf2>:
    1252:	0e 94 9b 09 	call	0x1336	; 0x1336 <__fp_cmp>
    1256:	08 f4       	brcc	.+2      	; 0x125a <__gesf2+0x8>
    1258:	8f ef       	ldi	r24, 0xFF	; 255
    125a:	08 95       	ret

0000125c <__mulsf3>:
    125c:	0e 94 41 09 	call	0x1282	; 0x1282 <__mulsf3x>
    1260:	0c 94 ef 08 	jmp	0x11de	; 0x11de <__fp_round>
    1264:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <__fp_pscA>
    1268:	38 f0       	brcs	.+14     	; 0x1278 <__mulsf3+0x1c>
    126a:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <__fp_pscB>
    126e:	20 f0       	brcs	.+8      	; 0x1278 <__mulsf3+0x1c>
    1270:	95 23       	and	r25, r21
    1272:	11 f0       	breq	.+4      	; 0x1278 <__mulsf3+0x1c>
    1274:	0c 94 d8 08 	jmp	0x11b0	; 0x11b0 <__fp_inf>
    1278:	0c 94 de 08 	jmp	0x11bc	; 0x11bc <__fp_nan>
    127c:	11 24       	eor	r1, r1
    127e:	0c 94 23 09 	jmp	0x1246	; 0x1246 <__fp_szero>

00001282 <__mulsf3x>:
    1282:	0e 94 00 09 	call	0x1200	; 0x1200 <__fp_split3>
    1286:	70 f3       	brcs	.-36     	; 0x1264 <__mulsf3+0x8>

00001288 <__mulsf3_pse>:
    1288:	95 9f       	mul	r25, r21
    128a:	c1 f3       	breq	.-16     	; 0x127c <__mulsf3+0x20>
    128c:	95 0f       	add	r25, r21
    128e:	50 e0       	ldi	r21, 0x00	; 0
    1290:	55 1f       	adc	r21, r21
    1292:	62 9f       	mul	r22, r18
    1294:	f0 01       	movw	r30, r0
    1296:	72 9f       	mul	r23, r18
    1298:	bb 27       	eor	r27, r27
    129a:	f0 0d       	add	r31, r0
    129c:	b1 1d       	adc	r27, r1
    129e:	63 9f       	mul	r22, r19
    12a0:	aa 27       	eor	r26, r26
    12a2:	f0 0d       	add	r31, r0
    12a4:	b1 1d       	adc	r27, r1
    12a6:	aa 1f       	adc	r26, r26
    12a8:	64 9f       	mul	r22, r20
    12aa:	66 27       	eor	r22, r22
    12ac:	b0 0d       	add	r27, r0
    12ae:	a1 1d       	adc	r26, r1
    12b0:	66 1f       	adc	r22, r22
    12b2:	82 9f       	mul	r24, r18
    12b4:	22 27       	eor	r18, r18
    12b6:	b0 0d       	add	r27, r0
    12b8:	a1 1d       	adc	r26, r1
    12ba:	62 1f       	adc	r22, r18
    12bc:	73 9f       	mul	r23, r19
    12be:	b0 0d       	add	r27, r0
    12c0:	a1 1d       	adc	r26, r1
    12c2:	62 1f       	adc	r22, r18
    12c4:	83 9f       	mul	r24, r19
    12c6:	a0 0d       	add	r26, r0
    12c8:	61 1d       	adc	r22, r1
    12ca:	22 1f       	adc	r18, r18
    12cc:	74 9f       	mul	r23, r20
    12ce:	33 27       	eor	r19, r19
    12d0:	a0 0d       	add	r26, r0
    12d2:	61 1d       	adc	r22, r1
    12d4:	23 1f       	adc	r18, r19
    12d6:	84 9f       	mul	r24, r20
    12d8:	60 0d       	add	r22, r0
    12da:	21 1d       	adc	r18, r1
    12dc:	82 2f       	mov	r24, r18
    12de:	76 2f       	mov	r23, r22
    12e0:	6a 2f       	mov	r22, r26
    12e2:	11 24       	eor	r1, r1
    12e4:	9f 57       	subi	r25, 0x7F	; 127
    12e6:	50 40       	sbci	r21, 0x00	; 0
    12e8:	9a f0       	brmi	.+38     	; 0x1310 <__mulsf3_pse+0x88>
    12ea:	f1 f0       	breq	.+60     	; 0x1328 <__mulsf3_pse+0xa0>
    12ec:	88 23       	and	r24, r24
    12ee:	4a f0       	brmi	.+18     	; 0x1302 <__mulsf3_pse+0x7a>
    12f0:	ee 0f       	add	r30, r30
    12f2:	ff 1f       	adc	r31, r31
    12f4:	bb 1f       	adc	r27, r27
    12f6:	66 1f       	adc	r22, r22
    12f8:	77 1f       	adc	r23, r23
    12fa:	88 1f       	adc	r24, r24
    12fc:	91 50       	subi	r25, 0x01	; 1
    12fe:	50 40       	sbci	r21, 0x00	; 0
    1300:	a9 f7       	brne	.-22     	; 0x12ec <__mulsf3_pse+0x64>
    1302:	9e 3f       	cpi	r25, 0xFE	; 254
    1304:	51 05       	cpc	r21, r1
    1306:	80 f0       	brcs	.+32     	; 0x1328 <__mulsf3_pse+0xa0>
    1308:	0c 94 d8 08 	jmp	0x11b0	; 0x11b0 <__fp_inf>
    130c:	0c 94 23 09 	jmp	0x1246	; 0x1246 <__fp_szero>
    1310:	5f 3f       	cpi	r21, 0xFF	; 255
    1312:	e4 f3       	brlt	.-8      	; 0x130c <__mulsf3_pse+0x84>
    1314:	98 3e       	cpi	r25, 0xE8	; 232
    1316:	d4 f3       	brlt	.-12     	; 0x130c <__mulsf3_pse+0x84>
    1318:	86 95       	lsr	r24
    131a:	77 95       	ror	r23
    131c:	67 95       	ror	r22
    131e:	b7 95       	ror	r27
    1320:	f7 95       	ror	r31
    1322:	e7 95       	ror	r30
    1324:	9f 5f       	subi	r25, 0xFF	; 255
    1326:	c1 f7       	brne	.-16     	; 0x1318 <__mulsf3_pse+0x90>
    1328:	fe 2b       	or	r31, r30
    132a:	88 0f       	add	r24, r24
    132c:	91 1d       	adc	r25, r1
    132e:	96 95       	lsr	r25
    1330:	87 95       	ror	r24
    1332:	97 f9       	bld	r25, 7
    1334:	08 95       	ret

00001336 <__fp_cmp>:
    1336:	99 0f       	add	r25, r25
    1338:	00 08       	sbc	r0, r0
    133a:	55 0f       	add	r21, r21
    133c:	aa 0b       	sbc	r26, r26
    133e:	e0 e8       	ldi	r30, 0x80	; 128
    1340:	fe ef       	ldi	r31, 0xFE	; 254
    1342:	16 16       	cp	r1, r22
    1344:	17 06       	cpc	r1, r23
    1346:	e8 07       	cpc	r30, r24
    1348:	f9 07       	cpc	r31, r25
    134a:	c0 f0       	brcs	.+48     	; 0x137c <__fp_cmp+0x46>
    134c:	12 16       	cp	r1, r18
    134e:	13 06       	cpc	r1, r19
    1350:	e4 07       	cpc	r30, r20
    1352:	f5 07       	cpc	r31, r21
    1354:	98 f0       	brcs	.+38     	; 0x137c <__fp_cmp+0x46>
    1356:	62 1b       	sub	r22, r18
    1358:	73 0b       	sbc	r23, r19
    135a:	84 0b       	sbc	r24, r20
    135c:	95 0b       	sbc	r25, r21
    135e:	39 f4       	brne	.+14     	; 0x136e <__fp_cmp+0x38>
    1360:	0a 26       	eor	r0, r26
    1362:	61 f0       	breq	.+24     	; 0x137c <__fp_cmp+0x46>
    1364:	23 2b       	or	r18, r19
    1366:	24 2b       	or	r18, r20
    1368:	25 2b       	or	r18, r21
    136a:	21 f4       	brne	.+8      	; 0x1374 <__fp_cmp+0x3e>
    136c:	08 95       	ret
    136e:	0a 26       	eor	r0, r26
    1370:	09 f4       	brne	.+2      	; 0x1374 <__fp_cmp+0x3e>
    1372:	a1 40       	sbci	r26, 0x01	; 1
    1374:	a6 95       	lsr	r26
    1376:	8f ef       	ldi	r24, 0xFF	; 255
    1378:	81 1d       	adc	r24, r1
    137a:	81 1d       	adc	r24, r1
    137c:	08 95       	ret

0000137e <__divmodhi4>:
    137e:	97 fb       	bst	r25, 7
    1380:	07 2e       	mov	r0, r23
    1382:	16 f4       	brtc	.+4      	; 0x1388 <__divmodhi4+0xa>
    1384:	00 94       	com	r0
    1386:	07 d0       	rcall	.+14     	; 0x1396 <__divmodhi4_neg1>
    1388:	77 fd       	sbrc	r23, 7
    138a:	09 d0       	rcall	.+18     	; 0x139e <__divmodhi4_neg2>
    138c:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <__udivmodhi4>
    1390:	07 fc       	sbrc	r0, 7
    1392:	05 d0       	rcall	.+10     	; 0x139e <__divmodhi4_neg2>
    1394:	3e f4       	brtc	.+14     	; 0x13a4 <__divmodhi4_exit>

00001396 <__divmodhi4_neg1>:
    1396:	90 95       	com	r25
    1398:	81 95       	neg	r24
    139a:	9f 4f       	sbci	r25, 0xFF	; 255
    139c:	08 95       	ret

0000139e <__divmodhi4_neg2>:
    139e:	70 95       	com	r23
    13a0:	61 95       	neg	r22
    13a2:	7f 4f       	sbci	r23, 0xFF	; 255

000013a4 <__divmodhi4_exit>:
    13a4:	08 95       	ret

000013a6 <__tablejump2__>:
    13a6:	ee 0f       	add	r30, r30
    13a8:	ff 1f       	adc	r31, r31
    13aa:	05 90       	lpm	r0, Z+
    13ac:	f4 91       	lpm	r31, Z
    13ae:	e0 2d       	mov	r30, r0
    13b0:	09 94       	ijmp

000013b2 <__umulhisi3>:
    13b2:	a2 9f       	mul	r26, r18
    13b4:	b0 01       	movw	r22, r0
    13b6:	b3 9f       	mul	r27, r19
    13b8:	c0 01       	movw	r24, r0
    13ba:	a3 9f       	mul	r26, r19
    13bc:	70 0d       	add	r23, r0
    13be:	81 1d       	adc	r24, r1
    13c0:	11 24       	eor	r1, r1
    13c2:	91 1d       	adc	r25, r1
    13c4:	b2 9f       	mul	r27, r18
    13c6:	70 0d       	add	r23, r0
    13c8:	81 1d       	adc	r24, r1
    13ca:	11 24       	eor	r1, r1
    13cc:	91 1d       	adc	r25, r1
    13ce:	08 95       	ret

000013d0 <__udivmodhi4>:
    13d0:	aa 1b       	sub	r26, r26
    13d2:	bb 1b       	sub	r27, r27
    13d4:	51 e1       	ldi	r21, 0x11	; 17
    13d6:	07 c0       	rjmp	.+14     	; 0x13e6 <__udivmodhi4_ep>

000013d8 <__udivmodhi4_loop>:
    13d8:	aa 1f       	adc	r26, r26
    13da:	bb 1f       	adc	r27, r27
    13dc:	a6 17       	cp	r26, r22
    13de:	b7 07       	cpc	r27, r23
    13e0:	10 f0       	brcs	.+4      	; 0x13e6 <__udivmodhi4_ep>
    13e2:	a6 1b       	sub	r26, r22
    13e4:	b7 0b       	sbc	r27, r23

000013e6 <__udivmodhi4_ep>:
    13e6:	88 1f       	adc	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	5a 95       	dec	r21
    13ec:	a9 f7       	brne	.-22     	; 0x13d8 <__udivmodhi4_loop>
    13ee:	80 95       	com	r24
    13f0:	90 95       	com	r25
    13f2:	bc 01       	movw	r22, r24
    13f4:	cd 01       	movw	r24, r26
    13f6:	08 95       	ret

000013f8 <_exit>:
    13f8:	f8 94       	cli

000013fa <__stop_program>:
    13fa:	ff cf       	rjmp	.-2      	; 0x13fa <__stop_program>
